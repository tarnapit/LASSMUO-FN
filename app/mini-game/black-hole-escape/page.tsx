"use client";
import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Navbar from "../../components/layout/Navbar";
import { ArrowLeft, Zap, Heart, Clock, Gauge, AlertTriangle, Target, Trophy } from "lucide-react";
import Link from "next/link";

interface BlackHoleGameState {
  gamePhase: 'waiting' | 'playing' | 'finished';
  score: number;
  lives: number;
  timeLeft: number;
  currentStage: number;
  totalStages: number;
  escapeDistance: number;
  maxEscapeDistance: number;
  gravityPull: number;
  shipSpeed: number;
  powerLevel: number;
  currentChallenge: string;
  achievements: string[];
}

interface BlackHoleChallenge {
  id: string;
  name: string;
  description: string;
  physicsRule: string;
  requiredAction: string;
  successBonus: number;
  failurePenalty: number;
}

const blackHoleChallenges: BlackHoleChallenge[] = [
  {
    id: 'gravity-slingshot',
    name: '‡πÅ‡∏Å‡∏ß‡πà‡∏á‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á',
    description: '‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏ô‡∏µ‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥',
    physicsRule: '‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏¢‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏î‡∏ô‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á',
    requiredAction: '‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
    successBonus: 300,
    failurePenalty: 100
  },
  {
    id: 'wormhole-navigation',
    name: '‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏£‡∏π‡∏´‡∏ô‡∏≠‡∏ô',
    description: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏π‡∏´‡∏ô‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏∏‡∏î‡∏û‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥',
    physicsRule: '‡∏£‡∏π‡∏´‡∏ô‡∏≠‡∏ô‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÉ‡∏ô‡∏≠‡∏ß‡∏Å‡∏≤‡∏®',
    requiredAction: '‡∏´‡∏•‡∏µ‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏®‡∏©‡∏ã‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏∏‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏π‡∏´‡∏ô‡∏≠‡∏ô',
    successBonus: 500,
    failurePenalty: 200
  },
  {
    id: 'time-dilation',
    name: '‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤',
    description: '‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å',
    physicsRule: '‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏∞‡∏¢‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤‡∏•‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô',
    requiredAction: '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß',
    successBonus: 400,
    failurePenalty: 150
  },
  {
    id: 'hawking-radiation',
    name: '‡∏£‡∏±‡∏á‡∏™‡∏µ Hawking',
    description: '‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡∏°‡∏≤',
    physicsRule: '‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏±‡∏á‡∏™‡∏µ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
    requiredAction: '‡∏ö‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏≥‡πÅ‡∏™‡∏á‡∏£‡∏±‡∏á‡∏™‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Ç‡∏≠‡∏ö',
    successBonus: 600,
    failurePenalty: 300
  },
  {
    id: 'event-horizon',
    name: '‡∏Ç‡∏≠‡∏ö‡∏ü‡πâ‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå',
    description: '‡∏´‡∏•‡∏µ‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏ü‡πâ‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏•‡∏∏‡∏î‡∏û‡πâ‡∏ô‡πÑ‡∏î‡πâ',
    physicsRule: '‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏µ‡∏î‡∏≥ ‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö',
    requiredAction: '‡∏´‡∏•‡∏µ‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏™‡∏µ‡∏î‡∏≥‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°',
    successBonus: 800,
    failurePenalty: 500
  }
];

export default function BlackHoleEscapeGame() {
  const params = useParams();
  const router = useRouter();
  const [gameState, setGameState] = useState<BlackHoleGameState>({
    gamePhase: 'waiting',
    score: 0,
    lives: 3,
    timeLeft: 120,
    currentStage: 1,
    totalStages: 5,
    escapeDistance: 0,
    maxEscapeDistance: 1000,
    gravityPull: 1.0,
    shipSpeed: 5,
    powerLevel: 100,
    currentChallenge: '',
    achievements: []
  });

  const [currentChallenge, setCurrentChallenge] = useState<BlackHoleChallenge | null>(null);
  const [showPhysicsInfo, setShowPhysicsInfo] = useState(false);
  const [particleEffects, setParticleEffects] = useState<any[]>([]);

  useEffect(() => {
    // Timer for the game
    let timer: NodeJS.Timeout;
    if (gameState.gamePhase === 'playing' && gameState.timeLeft > 0) {
      timer = setTimeout(() => {
        setGameState(prev => ({
          ...prev,
          timeLeft: prev.timeLeft - 1,
          gravityPull: prev.gravityPull + 0.01, // Gravity increases over time
          escapeDistance: Math.max(0, prev.escapeDistance - (prev.gravityPull * 2))
        }));
      }, 1000);
    } else if (gameState.timeLeft === 0) {
      endGame();
    }
    
    // Update progress bar
    const currentEscapePercentage = (gameState.escapeDistance / gameState.maxEscapeDistance) * 100;
    const progressBar = document.querySelector('.progress-bar') as HTMLElement;
    if (progressBar) {
      progressBar.style.setProperty('--progress-width', currentEscapePercentage.toString());
    }
    
    return () => clearTimeout(timer);
  }, [gameState.gamePhase, gameState.timeLeft, gameState.escapeDistance]);

  useEffect(() => {
    // Generate new challenge every 20 seconds
    const challengeTimer = setInterval(() => {
      if (gameState.gamePhase === 'playing') {
        generateNewChallenge();
      }
    }, 20000);

    return () => clearInterval(challengeTimer);
  }, [gameState.gamePhase]);

  const generateNewChallenge = () => {
    const availableChallenges = blackHoleChallenges.filter(
      challenge => !gameState.achievements.includes(challenge.id)
    );
    
    if (availableChallenges.length > 0) {
      const randomChallenge = availableChallenges[Math.floor(Math.random() * availableChallenges.length)];
      setCurrentChallenge(randomChallenge);
      setGameState(prev => ({
        ...prev,
        currentChallenge: randomChallenge.id
      }));
    }
  };

  const startGame = () => {
    setGameState(prev => ({
      ...prev,
      gamePhase: 'playing',
      timeLeft: 120,
      score: 0,
      lives: 3,
      currentStage: 1,
      escapeDistance: 0,
      gravityPull: 1.0,
      shipSpeed: 5,
      powerLevel: 100,
      achievements: []
    }));
    generateNewChallenge();
  };

  const completeChallenge = (success: boolean) => {
    if (!currentChallenge) return;

    if (success) {
      setGameState(prev => ({
        ...prev,
        score: prev.score + currentChallenge.successBonus,
        escapeDistance: prev.escapeDistance + (currentChallenge.successBonus / 2),
        powerLevel: Math.min(100, prev.powerLevel + 20),
        achievements: [...prev.achievements, currentChallenge.id]
      }));
      
      // Check if escaped
      if (gameState.escapeDistance >= gameState.maxEscapeDistance) {
        winGame();
      }
    } else {
      setGameState(prev => ({
        ...prev,
        score: Math.max(0, prev.score - currentChallenge.failurePenalty),
        lives: prev.lives - 1,
        powerLevel: Math.max(0, prev.powerLevel - 10)
      }));
      
      if (gameState.lives <= 1) {
        endGame();
      }
    }
    
    setCurrentChallenge(null);
    setTimeout(() => generateNewChallenge(), 3000);
  };

  const winGame = () => {
    setGameState(prev => ({
      ...prev,
      gamePhase: 'finished',
      score: prev.score + 1000 // Bonus for escaping
    }));
  };

  const endGame = () => {
    setGameState(prev => ({
      ...prev,
      gamePhase: 'finished'
    }));
  };

  const restartGame = () => {
    setGameState({
      gamePhase: 'waiting',
      score: 0,
      lives: 3,
      timeLeft: 120,
      currentStage: 1,
      totalStages: 5,
      escapeDistance: 0,
      maxEscapeDistance: 1000,
      gravityPull: 1.0,
      shipSpeed: 5,
      powerLevel: 100,
      currentChallenge: '',
      achievements: []
    });
    setCurrentChallenge(null);
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const getGravityLevel = () => {
    if (gameState.gravityPull < 1.5) return { level: '‡∏õ‡∏Å‡∏ï‡∏¥', color: 'text-green-400' };
    if (gameState.gravityPull < 2.5) return { level: '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', color: 'text-yellow-400' };
    if (gameState.gravityPull < 4.0) return { level: '‡∏ß‡∏¥‡∏Å‡∏§‡∏ï', color: 'text-orange-400' };
    return { level: '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô', color: 'text-red-400' };
  };

  const escapePercentage = (gameState.escapeDistance / gameState.maxEscapeDistance) * 100;
  const gravityInfo = getGravityLevel();

  if (!params.gameId || params.gameId !== 'black-hole-escape') {
    router.push('/mini-game');
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-purple-900 to-black relative overflow-hidden">
      <Navbar />
      
      <div className="container mx-auto px-6 py-8 relative z-10">
        {/* Header */}
        <div className="mb-8">
          <Link href="/mini-game" className="inline-flex items-center text-purple-400 hover:text-purple-300 mb-4">
            <ArrowLeft size={20} className="mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏Å‡∏°
          </Link>
          
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">
                ‡∏´‡∏ô‡∏µ‡∏ô‡∏£‡∏Å‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥ üï≥Ô∏è
              </h1>
              <p className="text-gray-300">
                ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏∏‡∏î‡∏û‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏°‡∏§‡∏ï‡∏¢‡∏π‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥
              </p>
            </div>
            <div className="text-6xl animate-pulse">üöÄ</div>
          </div>
        </div>

        {/* Game Stats */}
        {gameState.gamePhase !== 'waiting' && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
            <div className="bg-black/50 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
              <div className="flex items-center justify-between mb-2">
                <Trophy className="text-yellow-400" size={20} />
                <span className="text-gray-400">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
              </div>
              <div className="text-2xl font-bold text-white">{gameState.score}</div>
            </div>
            
            <div className="bg-black/50 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
              <div className="flex items-center justify-between mb-2">
                <Heart className="text-red-400" size={20} />
                <span className="text-gray-400">‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</span>
              </div>
              <div className="text-2xl font-bold text-white">{gameState.lives}</div>
            </div>
            
            <div className="bg-black/50 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
              <div className="flex items-center justify-between mb-2">
                <Clock className="text-blue-400" size={20} />
                <span className="text-gray-400">‡πÄ‡∏ß‡∏•‡∏≤</span>
              </div>
              <div className="text-2xl font-bold text-white">{formatTime(gameState.timeLeft)}</div>
            </div>
            
            <div className="bg-black/50 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
              <div className="flex items-center justify-between mb-2">
                <Zap className="text-green-400" size={20} />
                <span className="text-gray-400">‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô</span>
              </div>
              <div className="text-2xl font-bold text-white">{gameState.powerLevel}%</div>
            </div>
          </div>
        )}

        {/* Escape Progress */}
        {gameState.gamePhase === 'playing' && (
          <div className="mb-8">
            <div className="bg-black/50 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-white">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å</h3>
                <div className="flex items-center space-x-2">
                  <Target className="text-purple-400" size={20} />
                  <span className="text-purple-400">{escapePercentage.toFixed(1)}%</span>
                </div>
              </div>
              
              <div className="w-full bg-gray-700 rounded-full h-4 mb-4">
                <div 
                  className={`bg-gradient-to-r from-purple-500 to-pink-500 h-4 rounded-full transition-all duration-300 progress-bar`}
                  data-width={escapePercentage}
                ></div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-sm text-gray-400">‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥</div>
                  <div className="text-lg font-bold text-white">{gameState.escapeDistance.toFixed(0)} km</div>
                </div>
                <div>
                  <div className="text-sm text-gray-400">‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á</div>
                  <div className={`text-lg font-bold ${gravityInfo.color}`}>
                    {gravityInfo.level} ({gameState.gravityPull.toFixed(1)}x)
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Current Challenge */}
        {currentChallenge && gameState.gamePhase === 'playing' && (
          <div className="mb-8">
            <div className="bg-gradient-to-r from-purple-900/50 to-pink-900/50 backdrop-blur-sm rounded-xl p-6 border border-purple-400/50">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-white">‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h3>
                <AlertTriangle className="text-yellow-400" size={24} />
              </div>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-lg font-semibold text-purple-300 mb-2">
                    {currentChallenge.name}
                  </h4>
                  <p className="text-gray-300 mb-2">{currentChallenge.description}</p>
                  
                  <div className="bg-black/30 rounded-lg p-3 mb-3">
                    <div className="text-sm text-yellow-300 mb-1">üìö ‡∏Å‡∏é‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå:</div>
                    <div className="text-sm text-gray-300">{currentChallenge.physicsRule}</div>
                  </div>
                  
                  <div className="bg-black/30 rounded-lg p-3 mb-4">
                    <div className="text-sm text-green-300 mb-1">üéØ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à:</div>
                    <div className="text-sm text-gray-300">{currentChallenge.requiredAction}</div>
                  </div>
                </div>
                
                <div className="flex space-x-3">
                  <button
                    onClick={() => completeChallenge(true)}
                    className="bg-gradient-to-r from-green-600 to-green-500 text-white px-6 py-3 rounded-lg font-semibold hover:from-green-500 hover:to-green-400 transition-all transform hover:scale-105"
                  >
                    ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (+{currentChallenge.successBonus})
                  </button>
                  <button
                    onClick={() => completeChallenge(false)}
                    className="bg-gradient-to-r from-red-600 to-red-500 text-white px-6 py-3 rounded-lg font-semibold hover:from-red-500 hover:to-red-400 transition-all transform hover:scale-105"
                  >
                    ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (-{currentChallenge.failurePenalty})
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Game Content */}
        <div className="max-w-4xl mx-auto">
          {gameState.gamePhase === 'waiting' && (
            <div className="text-center py-20">
              <div className="text-8xl mb-8 animate-pulse">üï≥Ô∏è</div>
              <h2 className="text-4xl font-bold text-white mb-4">‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?</h2>
              <p className="text-gray-300 mb-8 text-lg max-w-2xl mx-auto">
                ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏¢! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡∏´‡∏•‡∏µ‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á‡∏î‡∏π‡∏î‡∏°‡∏§‡∏ï‡∏¢‡∏π
                ‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥ ‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8 max-w-4xl mx-auto">
                <div className="bg-black/30 rounded-xl p-6 border border-purple-500/30">
                  <div className="text-3xl mb-3">üåå</div>
                  <h3 className="text-lg font-semibold text-white mb-2">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ü‡∏¥‡∏™‡∏¥‡∏Å‡∏™‡πå</h3>
                  <p className="text-gray-400 text-sm">
                    ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏ô‡πå‡∏™‡πÑ‡∏ï‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
                  </p>
                </div>
                
                <div className="bg-black/30 rounded-xl p-6 border border-purple-500/30">
                  <div className="text-3xl mb-3">‚ö°</div>
                  <h3 className="text-lg font-semibold text-white mb-2">‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå</h3>
                  <p className="text-gray-400 text-sm">
                    ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
                  </p>
                </div>
                
                <div className="bg-black/30 rounded-xl p-6 border border-purple-500/30">
                  <div className="text-3xl mb-3">üèÜ</div>
                  <h3 className="text-lg font-semibold text-white mb-2">‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</h3>
                  <p className="text-gray-400 text-sm">
                    ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏≠‡∏ß‡∏Å‡∏≤‡∏®
                  </p>
                </div>
              </div>
              
              <button 
                onClick={startGame}
                className="bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold px-10 py-4 rounded-xl text-xl hover:from-purple-500 hover:to-pink-500 transition-all transform hover:scale-105 shadow-lg shadow-purple-500/50"
              >
                üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥
              </button>
            </div>
          )}

          {gameState.gamePhase === 'finished' && (
            <div className="text-center py-20">
              <div className="text-8xl mb-8">
                {gameState.escapeDistance >= gameState.maxEscapeDistance ? 'üéâ' : 'üí•'}
              </div>
              <h2 className="text-4xl font-bold text-white mb-4">
                {gameState.escapeDistance >= gameState.maxEscapeDistance ? 
                  '‡∏´‡∏•‡∏∏‡∏î‡∏û‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!' : '‡∏ñ‡∏π‡∏Å‡∏î‡∏π‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏•‡∏∏‡∏°‡∏î‡∏≥...'}
              </h2>
              
              <div className="bg-black/50 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/30 mb-8 max-w-md mx-auto">
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-gray-400">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°:</span>
                    <span className="text-yellow-400 font-bold">{gameState.score}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏•‡∏ö‡∏´‡∏•‡∏µ‡∏Å:</span>
                    <span className="text-purple-400 font-bold">{gameState.escapeDistance.toFixed(0)} km</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</span>
                    <span className="text-green-400 font-bold">{gameState.achievements.length}/5</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</span>
                    <span className="text-blue-400 font-bold">{gameState.powerLevel}%</span>
                  </div>
                </div>
              </div>

              {gameState.achievements.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-xl font-bold text-white mb-4">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-2xl mx-auto">
                    {gameState.achievements.map(achievementId => {
                      const challenge = blackHoleChallenges.find(c => c.id === achievementId);
                      return challenge ? (
                        <div key={achievementId} className="bg-green-900/30 rounded-lg p-4 border border-green-500/30">
                          <div className="text-green-400 font-semibold">{challenge.name}</div>
                          <div className="text-sm text-gray-400">{challenge.description}</div>
                        </div>
                      ) : null;
                    })}
                  </div>
                </div>
              )}
              
              <div className="space-x-4">
                <button 
                  onClick={restartGame}
                  className="bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold px-6 py-3 rounded-lg hover:from-purple-500 hover:to-pink-500 transition-all"
                >
                  üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                </button>
                <Link href="/mini-game">
                  <button className="bg-gray-700 text-white font-semibold px-6 py-3 rounded-lg hover:bg-gray-600 transition-all">
                    üè† ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
                  </button>
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Animated Background - Black Hole Effect */}
      <div className="fixed inset-0 pointer-events-none">
        <div className="absolute inset-0 bg-gradient-radial from-transparent via-purple-900/20 to-black animate-pulse"></div>
        
        {/* Particle Effects */}
        <div className="absolute top-1/4 left-1/4 w-1 h-1 bg-purple-400 rounded-full animate-ping"></div>
        <div className="absolute top-1/3 right-1/3 w-1 h-1 bg-pink-400 rounded-full animate-ping delay-75"></div>
        <div className="absolute bottom-1/4 left-1/3 w-1 h-1 bg-blue-400 rounded-full animate-ping delay-150"></div>
        <div className="absolute bottom-1/3 right-1/4 w-1 h-1 bg-purple-400 rounded-full animate-ping delay-300"></div>
        
        {/* Swirling Effect */}
        <div className="absolute inset-0 animate-spin-slow">
          <div className="absolute top-1/2 left-1/2 w-2 h-2 bg-purple-500 rounded-full transform -translate-x-1/2 -translate-y-1/2 animate-pulse"></div>
          <div className="absolute top-1/2 left-1/2 w-4 h-4 border border-purple-400 rounded-full transform -translate-x-1/2 -translate-y-1/2 animate-pulse delay-100"></div>
          <div className="absolute top-1/2 left-1/2 w-6 h-6 border border-pink-400 rounded-full transform -translate-x-1/2 -translate-y-1/2 animate-pulse delay-200"></div>
        </div>
      </div>
    </div>
  );
}
