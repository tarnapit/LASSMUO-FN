"use client";
import { useState, useEffect, useCallback } from "react";
import { useParams, useRouter } from "next/navigation";
import { getLearningModuleById } from "../../lib/hooks/useLearningData";
import { LearningModule, Chapter } from "../../types/learning";
import { courseQuizService, coursePostestService } from "../../lib/api/services";
import { progressManager } from "../../lib/progress";
import Navbar from "../../components/layout/Navbar";
import ProgressBar from "../../components/ui/ProgressBar";
import InteractiveActivityComponent from "../../components/learning/InteractiveActivity";
import {
  ChevronLeft,
  ChevronRight,
  BookOpen,
  Clock,
  ArrowLeft,
  CheckCircle,
  Brain,
  Trophy,
  Star,
  Zap,
  XCircle,
} from "lucide-react";
import Link from "next/link";

export default function LearningTopicPage() {
  const params = useParams();
  const router = useRouter();
  const [module, setModule] = useState<LearningModule | null>(null);
  const [quiz, setQuiz] = useState<any>(null);
  const [currentChapterIndex, setCurrentChapterIndex] = useState(0);
  const [currentContentIndex, setCurrentContentIndex] = useState(0);
  const [startTime, setStartTime] = useState<Date>(new Date());
  const [chapterProgress, setChapterProgress] = useState<Record<string, any>>(
    {}
  );
  const [moduleCompleted, setModuleCompleted] = useState(false);
  const [activityScores, setActivityScores] = useState<Record<string, number>>(
    {}
  );
  const [totalScore, setTotalScore] = useState(0);
  const [completedActivities, setCompletedActivities] = useState<Set<string>>(
    new Set()
  );
  const [canProceed, setCanProceed] = useState(true);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà
  const [currentActivityId, setCurrentActivityId] = useState<string | null>(null);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const [shouldShowCompletion, setShouldShowCompletion] = useState(false);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö module ‡πÉ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
  const getModuleOrder = (moduleId: string): number => {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö module ‡∏ï‡∏≤‡∏° API ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£
    const moduleOrder: Record<string, number> = {
      'ba3fd565-dc81-4e74-b253-ef0a4074f8cf': 1, // Solar System
      '4db710de-f734-4c7e-bf5f-a5645847b5bc': 2, // Earth Structure
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° module ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
      // 'stellar-evolution': 3,
      // 'galaxies-universe': 4,
    };
    
    console.log(`üìä Module order for ${moduleId}: ${moduleOrder[moduleId] || 1}`);
    return moduleOrder[moduleId] || 1; // default ‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const shouldDisplayCompletionScreen = () => {
    if (!module || !moduleCompleted) return false;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠:
    // 1. module ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß AND
    // 2. ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á chapter ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ AND
    // 3. shouldShowCompletion ‡πÄ‡∏õ‡πá‡∏ô true
    const isLastChapter = currentChapterIndex === module.chapters.length - 1;
    const isLastContent = currentContentIndex === module.chapters[currentChapterIndex]?.content.length - 1;
    
    return isLastChapter && isLastContent && shouldShowCompletion;
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const checkCanProceed = useCallback(() => {
    if (!module) {
      setCanProceed(true);
      return;
    }

    const currentChapter = module.chapters[currentChapterIndex];
    const currentContent = currentChapter?.content[currentContentIndex];

    if (!currentContent) {
      setCanProceed(true);
      return;
    }

    console.log('checkCanProceed called for content:', currentContent.type, currentContent.activity?.id);

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
    if (currentContent.required && currentContent.activity) {
      const activityId = currentContent.activity.id;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const isCompleted = completedActivities.has(activityId);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó currentActivityId
      setCurrentActivityId(activityId);
      
      console.log(`Checking required activity ${activityId}: completed = ${isCompleted}, completedActivities:`, [...completedActivities]);
      
      setCanProceed(isCompleted);
    } else {
      console.log('Content is not a required activity, can proceed');
      setCanProceed(true);
      setCurrentActivityId(null);
    }
  }, [module, currentChapterIndex, currentContentIndex, completedActivities]);

  useEffect(() => {
    const fetchModule = async () => {
      if (params.topic) {
        try {
          const foundModule = await getLearningModuleById(params.topic as string);
          
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quiz ‡∏à‡∏≤‡∏Å API (PostTest)
          let foundQuiz = null;
          try {
            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á PostTest ‡∏à‡∏≤‡∏Å coursePostest API ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ courseId
            if (foundModule && foundModule.id) {
              console.log('Looking for PostTest quiz for course:', foundModule.id);
              
              const postestResponse = await coursePostestService.getCoursePostestsByCourseId(foundModule.id);
              
              if (postestResponse.success && postestResponse.data && postestResponse.data.length > 0) {
                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ PostTest ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö courseId ‡∏Ç‡∏≠‡∏á module ‡∏ô‡∏µ‡πâ
                const matchingPostest = postestResponse.data.find(postest => 
                  postest.courseId === foundModule.id
                );
                
                if (matchingPostest) {
                  // ‡∏™‡∏£‡πâ‡∏≤‡∏á quiz object ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                  foundQuiz = {
                    ...matchingPostest,
                    // ‡πÉ‡∏ä‡πâ ID ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö original ID ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢
                    originalId: matchingPostest.id,
                    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ title-based ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility
                    legacyId: matchingPostest.title?.includes('‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏•‡∏Å') 
                      ? 'earth-structure-posttest' 
                      : matchingPostest.title?.includes('‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞')
                      ? 'solar-system-posttest'
                      : matchingPostest.id
                  };
                  
                  console.log('Found matching PostTest quiz for course:', {
                    courseId: foundModule.id,
                    title: foundQuiz.title,
                    originalId: foundQuiz.originalId,
                    legacyId: foundQuiz.legacyId,
                    postestCourseId: foundQuiz.courseId
                  });
                } else {
                  console.log('No PostTest found matching courseId:', foundModule.id);
                  console.log('Available postests:', postestResponse.data.map(p => ({
                    id: p.id, 
                    title: p.title, 
                    courseId: p.courseId
                  })));
                }
              } else {
                console.log('No PostTest found for course:', foundModule.id);
                
                // Fallback: ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å course response ‡∏´‡∏≤‡∏Å‡∏°‡∏µ coursePostest
                // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° courseService ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ API ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                console.log('CourseService not available, skipping course response check');
              }
            }
            
            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ quiz ‡∏à‡∏≤‡∏Å PostTest ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏à‡∏≤‡∏Å CourseQuiz API
            if (!foundQuiz && foundModule && foundModule.id) {
              console.log('No PostTest found, trying CourseQuiz API as fallback for course:', foundModule.id);
              
              // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á quiz ‡∏ï‡∏≤‡∏° courseId ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
              try {
                const courseQuizResponse = await courseQuizService.getCourseQuizzesByCourseId(foundModule.id);
                
                if (courseQuizResponse.success && courseQuizResponse.data && courseQuizResponse.data.length > 0) {
                  // ‡πÉ‡∏ä‡πâ quiz ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö course ‡∏ô‡∏µ‡πâ
                  foundQuiz = courseQuizResponse.data[0];
                  console.log('Found matching quiz for course from CourseQuiz API:', foundQuiz.title || foundQuiz.id);
                } else {
                  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CourseQuiz API ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏à‡∏≤‡∏Å API ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                  console.log('No specific CourseQuiz found, trying general CourseQuiz API as last resort');
                  const allQuizResponse = await courseQuizService.getAllCourseQuizzes();
                  
                  if (allQuizResponse.success && allQuizResponse.data && allQuizResponse.data.length > 0) {
                    // ‡∏´‡∏≤ quiz ‡∏ó‡∏µ‡πà courseId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                    const matchingQuiz = allQuizResponse.data.find(quiz => quiz.courseId === foundModule.id);
                    
                    if (matchingQuiz) {
                      foundQuiz = matchingQuiz;
                      console.log('Found matching quiz by courseId from general API:', foundQuiz.title || foundQuiz.id);
                    } else {
                      console.log('No matching quiz found for course:', foundModule.id);
                    }
                  }
                }
              } catch (courseQuizError) {
                console.log('Error fetching CourseQuiz by courseId:', courseQuizError);
              }
            }
          } catch (quizError) {
            console.log('Error fetching quiz:', quizError);
          }

          if (foundModule) {
            setModule(foundModule);
            setQuiz(foundQuiz);
            
            console.log(`üìö Module loaded:`, {
              id: foundModule.id,
              title: foundModule.title,
              moduleOrder: getModuleOrder(foundModule.id),
              chaptersCount: foundModule.chapters.length
            });
            
            // Debug quiz information
            if (foundQuiz) {
              console.log(`üéØ Quiz loaded for module ${foundModule.id}:`, {
                quizId: foundQuiz.id,
                originalId: (foundQuiz as any).originalId,
                legacyId: (foundQuiz as any).legacyId,
                quizTitle: foundQuiz.title,
                courseId: foundQuiz.courseId
              });
            } else {
              console.log(`‚ùå No quiz found for module ${foundModule.id}`);
            }
            
            // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï states ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô module
            setCompletedActivities(new Set());
            setActivityScores({});
            setTotalScore(0);
            setCurrentActivityId(null);
            setShouldShowCompletion(false);
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô module
            progressManager.startLearningModule(params.topic as string);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏à‡∏≤‡∏Å API ‡∏à‡∏£‡∏¥‡∏á
            const checkModuleCompletion = async () => {
              try {
                // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Learning page
                const completionPercentage = await progressManager.getModuleCompletionPercentageWithAPI(foundModule.id);
                const isModuleCompleted = completionPercentage >= 100;
                
                console.log(`üìä Module completion check for ${foundModule.title}:`, {
                  completionPercentage,
                  isModuleCompleted,
                  moduleId: foundModule.id
                });
                
                setModuleCompleted(isModuleCompleted);
                
                // ‡∏ñ‡πâ‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                if (isModuleCompleted) {
                  await progressManager.completeModule(foundModule.id, foundModule.chapters.length);
                  
                  // ‡πÑ‡∏õ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á module
                  const lastChapterIndex = foundModule.chapters.length - 1;
                  const lastContentIndex = foundModule.chapters[lastChapterIndex].content.length - 1;
                  
                  setCurrentChapterIndex(lastChapterIndex);
                  setCurrentContentIndex(lastContentIndex);
                  setShouldShowCompletion(true);
                }
              } catch (error) {
                console.error('Error checking module completion:', error);
                // Fallback ‡πÉ‡∏ä‡πâ local progress
                const moduleProgress = progressManager.getModuleProgress(params.topic as string);
                const isCompleted = moduleProgress?.isCompleted || false;
                setModuleCompleted(isCompleted);
                
                if (isCompleted) {
                  // ‡πÑ‡∏õ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á module
                  const lastChapterIndex = foundModule.chapters.length - 1;
                  const lastContentIndex = foundModule.chapters[lastChapterIndex].content.length - 1;
                  
                  setCurrentChapterIndex(lastChapterIndex);
                  setCurrentContentIndex(lastContentIndex);
                  setShouldShowCompletion(true);
                }
              }
            };
            
            await checkModuleCompletion();

            // ‡πÇ‡∏´‡∏•‡∏î progress ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ chapter ‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            const progresses: Record<string, any> = {};
            foundModule.chapters.forEach((chapter) => {
              const chapterProg = progressManager.getChapterProgress(
                params.topic as string,
                chapter.id
              );
              progresses[chapter.id] = chapterProg;
            });
            setChapterProgress(progresses);
          } else {
            router.push("/learning");
          }
        } catch (error) {
          console.error('Error fetching module:', error);
          router.push("/learning");
        }
      }
    };

    fetchModule();
  }, [params.topic, router]);

  // Listen for progress updates ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä module completion
  useEffect(() => {
    const handleProgressUpdate = async () => {
      if (module) {
        console.log('üì° Progress update received, checking module completion...');
        try {
          const completionPercentage = await progressManager.getModuleCompletionPercentageWithAPI(module.id);
          const isModuleCompleted = completionPercentage >= 100;
          
          console.log(`üìä Updated module completion for ${module.title}:`, {
            completionPercentage,
            isModuleCompleted
          });
          
          setModuleCompleted(isModuleCompleted);
          
          // ‡∏ñ‡πâ‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
          if (isModuleCompleted) {
            const isLastChapter = currentChapterIndex === module.chapters.length - 1;
            const isLastContent = currentContentIndex === module.chapters[currentChapterIndex]?.content.length - 1;
            
            if (isLastChapter && isLastContent) {
              setShouldShowCompletion(true);
            }
          }
        } catch (error) {
          console.error('Error updating module completion:', error);
        }
      }
    };

    window.addEventListener('progressUpdated', handleProgressUpdate as EventListener);
    
    return () => {
      window.removeEventListener('progressUpdated', handleProgressUpdate as EventListener);
    };
  }, [module, currentChapterIndex, currentContentIndex]);

  // ‡πÄ‡∏ä‡πá‡∏Ñ module completion ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö visible ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  useEffect(() => {
    const handleVisibilityChange = async () => {
      if (!document.hidden && module) {
        console.log('üëÅÔ∏è Page visible again, checking module completion...');
        try {
          const completionPercentage = await progressManager.getModuleCompletionPercentageWithAPI(module.id);
          const isModuleCompleted = completionPercentage >= 100;
          
          console.log(`üëÅÔ∏è Visibility check module completion for ${module.title}:`, {
            completionPercentage,
            isModuleCompleted
          });
          
          setModuleCompleted(isModuleCompleted);
          
          // ‡∏ñ‡πâ‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
          if (isModuleCompleted) {
            const isLastChapter = currentChapterIndex === module.chapters.length - 1;
            const isLastContent = currentContentIndex === module.chapters[currentChapterIndex]?.content.length - 1;
            
            if (isLastChapter && isLastContent) {
              setShouldShowCompletion(true);
            }
          }
        } catch (error) {
          console.error('Error checking module completion on visibility change:', error);
        }
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [module, currentChapterIndex, currentContentIndex]);

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô chapter ‡∏´‡∏£‡∏∑‡∏≠ content
  useEffect(() => {
    setStartTime(new Date());
  }, [currentChapterIndex, currentContentIndex]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô content ‡∏´‡∏£‡∏∑‡∏≠ completedActivities
  useEffect(() => {
    checkCanProceed();
  }, [checkCanProceed]);

  // Debug useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π state changes
  useEffect(() => {
    console.log('completedActivities changed:', [...completedActivities]);
    console.log('canProceed:', canProceed);
    console.log('currentActivityId:', currentActivityId);
  }, [completedActivities, canProceed, currentActivityId]);

  if (!module) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-neutral-900 to-zinc-900 flex items-center justify-center">
        <div className="text-white text-xl">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    );
  }

  // Debug log ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  console.log('üéØ Learning page render:', {
    moduleId: module.id,
    moduleTitle: module.title,
    moduleCompleted: moduleCompleted,
    hasQuiz: !!quiz
  });

  const currentChapter = module.chapters[currentChapterIndex];
  const currentContent = currentChapter?.content[currentContentIndex];
  const isLastContent =
    currentContentIndex === currentChapter.content.length - 1;
  const isLastChapter = currentChapterIndex === module.chapters.length - 1;
  const isFirstContent = currentContentIndex === 0;
  const isFirstChapter = currentChapterIndex === 0;

  const nextContent = async () => {
    if (!isLastContent) {
      setCurrentContentIndex((prev) => prev + 1);
    } else if (!isLastChapter) {
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡∏Ç‡∏≠‡∏á chapter ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö chapter
      await completeCurrentChapter();
      setCurrentChapterIndex((prev) => prev + 1);
      setCurrentContentIndex(0);
    } else {
      // ‡∏à‡∏ö module ‡πÅ‡∏•‡πâ‡∏ß
      await completeCurrentChapter();
      await completeModule(false); // ‡πÑ‡∏°‡πà redirect ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      setShouldShowCompletion(true);
    }
  };

  const prevContent = () => {
    if (!isFirstContent) {
      setCurrentContentIndex((prev) => prev - 1);
    } else if (!isFirstChapter) {
      setCurrentChapterIndex((prev) => prev - 1);
      setCurrentContentIndex(
        module!.chapters[currentChapterIndex - 1].content.length - 1
      );
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡∏Ç‡∏≠‡∏á chapter ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const completeCurrentChapter = async () => {
    if (!module) return;

    const timeSpent = Math.round(
      (new Date().getTime() - startTime.getTime()) / (1000 * 60)
    ); // ‡∏ô‡∏≤‡∏ó‡∏µ
    const currentChapter = module.chapters[currentChapterIndex];

    console.log(
      `Completing chapter ${currentChapter.id} in module ${module.id}`
    );

    await progressManager.updateChapterProgress(
      module.id,
      currentChapter.id,
      100, // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö 100%
      timeSpent,
      true // ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    );

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
    setChapterProgress((prev) => ({
      ...prev,
      [currentChapter.id]: {
        ...prev[currentChapter.id],
        completed: true,
        readProgress: 100,
        timeSpent: (prev[currentChapter.id]?.timeSpent || 0) + timeSpent,
      },
    }));

    console.log(`Chapter ${currentChapter.id} completed successfully`);

    // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
    if (typeof window !== "undefined") {
      window.dispatchEvent(
        new CustomEvent("progressUpdated", {
          detail: {
            type: "chapter",
            moduleId: module.id,
            chapterId: currentChapter.id,
          },
        })
      );
    }
  };

  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô module
  const completeModule = async (shouldRedirect = false) => {
    if (!module) return;

    console.log(
      `Completing module ${module.id} with ${module.chapters.length} chapters`
    );
    await progressManager.completeModule(module.id, module.chapters.length);

    setModuleCompleted(true);

    console.log(`Module ${module.id} completed successfully`);

    // ‡∏™‡πà‡∏á event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
    if (typeof window !== "undefined") {
      window.dispatchEvent(
        new CustomEvent("progressUpdated", {
          detail: { type: "module", moduleId: module.id },
        })
      );
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü
  const handleActivityComplete = (
    activityId: string,
    score: number,
    timeSpent: number,
    passed: boolean
  ) => {
    console.log(
      `Activity ${activityId} completed with score ${score} in ${timeSpent} seconds, passed: ${passed}`
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (currentActivityId !== activityId) {
      console.warn(`Activity ${activityId} is not the current activity (${currentActivityId})`);
      return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    setActivityScores((prev) => {
      const newScores = { ...prev, [activityId]: score };
      const newTotal = Object.values(newScores).reduce((sum, s) => sum + s, 0);
      setTotalScore(newTotal);
      return newScores;
    });

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å checkCanProceed ‡πÉ‡∏ô useEffect
    if (passed) {
      setCompletedActivities((prev) => {
        const newSet = new Set([...prev, activityId]);
        console.log(`Activity ${activityId} marked as completed. All completed:`, [...newSet]);
        return newSet;
      });
    } else {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡πá‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏¢
      checkCanProceed();
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
    if (typeof window !== "undefined") {
      window.dispatchEvent(
        new CustomEvent("progressUpdated", {
          detail: { type: "activity", activityId, score, timeSpent, passed },
        })
      );
    }
  };

  const renderContent = () => {
    if (!currentContent) return null;

    // Calculate progress percentage
    const progressPercentage =
      ((currentContentIndex + 1) / currentChapter.content.length) * 100;

    switch (currentContent.type) {
      case "text":
        return (
          <div className="prose prose-sm sm:prose-base lg:prose-lg prose-invert max-w-none">
            <p className="text-gray-200 leading-relaxed text-sm sm:text-base lg:text-lg">
              {currentContent.content}
            </p>
          </div>
        );

      case "video":
        return (
          <div className="space-y-3 sm:space-y-4">
            <div className="text-center">
              {currentContent.imageUrl ? (
                <div className="bg-white/5 rounded-lg p-3 sm:p-4 mb-3 sm:mb-4">
                  {/* ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô YouTube URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà */}
                  {currentContent.imageUrl.includes('youtube.com') || currentContent.imageUrl.includes('youtu.be') ? (
                    <div className="relative w-full aspect-video">
                      <iframe
                        src={currentContent.imageUrl.replace('watch?v=', 'embed/')}
                        title={currentContent.content}
                        className="absolute top-0 left-0 w-full h-full rounded-lg"
                        allowFullScreen
                      />
                    </div>
                  ) : (
                    <video
                      src={currentContent.imageUrl}
                      controls
                      className="max-w-full max-h-64 sm:max-h-96 mx-auto rounded-lg shadow-lg"
                      onError={(e) => {
                        const target = e.target as HTMLVideoElement;
                        target.style.display = 'none';
                        target.nextElementSibling?.classList.remove('hidden');
                      }}
                    >
                      ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ
                    </video>
                  )}
                  <div className="hidden text-gray-400 text-base sm:text-lg py-6 sm:py-8">
                    üé• {currentContent.content}
                    <div className="text-xs sm:text-sm text-gray-500 mt-2">
                      (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ)
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-800 rounded-lg p-6 sm:p-8 mb-3 sm:mb-4">
                  <div className="text-gray-400 text-base sm:text-lg">
                    üé• {currentContent.content}
                  </div>
                  <div className="text-xs sm:text-sm text-gray-500 mt-2">
                    (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
                  </div>
                </div>
              )}
            </div>
            
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ */}
            {currentContent.content && (
              <div className="prose prose-sm sm:prose-base lg:prose-lg prose-invert max-w-none">
                <p className="text-gray-200 leading-relaxed text-center text-sm sm:text-base">
                  {currentContent.content}
                </p>
              </div>
            )}
          </div>
        );

      case "image":
        return (
          <div className="space-y-4 sm:space-y-6">
            <div className="text-center">
              {currentContent.imageUrl ? (
                <div className="bg-white/5 rounded-lg p-3 sm:p-4 mb-3 sm:mb-4">
                  <img
                    src={currentContent.imageUrl}
                    alt={currentContent.content}
                    className="max-w-full max-h-64 sm:max-h-80 lg:max-h-96 mx-auto rounded-lg shadow-lg object-contain"
                    onError={(e) => {
                      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á placeholder
                      const target = e.target as HTMLImageElement;
                      target.style.display = 'none';
                      target.nextElementSibling?.classList.remove('hidden');
                    }}
                  />
                  <div className="hidden text-gray-400 text-base sm:text-lg py-6 sm:py-8">
                    üì∑ {currentContent.content}
                    <div className="text-xs sm:text-sm text-gray-500 mt-2">
                      (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ)
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-800 rounded-lg p-6 sm:p-8 mb-3 sm:mb-4">
                  <div className="text-gray-400 text-base sm:text-lg">
                    üì∑ {currentContent.content}
                  </div>
                  <div className="text-xs sm:text-sm text-gray-500 mt-2">
                    (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û)
                  </div>
                </div>
              )}
            </div>
            
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            {currentContent.content && currentContent.content !== '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô' && (
              <div className="prose prose-sm sm:prose-base lg:prose-lg prose-invert max-w-none">
                <p className="text-gray-200 leading-relaxed text-center text-sm sm:text-base">
                  {currentContent.content}
                </p>
              </div>
            )}
          </div>
        );

      // ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      case "quiz":
        return currentContent.activity ? (
          <InteractiveActivityComponent
            key={`${currentChapterIndex}-${currentContentIndex}-${currentContent.activity.id}`}
            activity={currentContent.activity}
            onComplete={(score, timeSpent, passed) =>
              handleActivityComplete(
                currentContent.activity!.id,
                score,
                timeSpent,
                passed
              )
            }
            required={currentContent.required}
            minimumScore={currentContent.minimumScore}
          />
        ) : (
          <div className="text-red-400">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
        );

      case "interactive":
        return currentContent.activity ? (
          <div className="bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-xl p-4 sm:p-6 lg:p-8 border border-blue-500/30">
            <div className="text-center mb-4 sm:mb-6">
              <h3 className="text-lg sm:text-xl lg:text-2xl font-bold text-blue-400 mb-2">
                üí° ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏è‡∏¥‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
              </h3>
              <p className="text-white text-base sm:text-lg mb-2 px-2">
                {currentContent.activity.title}
              </p>
              <p className="text-gray-300 text-xs sm:text-sm px-4">
                ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤
              </p>
            </div>
            <InteractiveActivityComponent
              key={`${currentChapterIndex}-${currentContentIndex}-${currentContent.activity.id}`}
              activity={currentContent.activity}
              onComplete={(score, timeSpent, passed) =>
                handleActivityComplete(
                  currentContent.activity!.id,
                  score,
                  timeSpent,
                  passed
                )
              }
              required={currentContent.required}
              minimumScore={currentContent.minimumScore}
            />
          </div>
        ) : (
          <div className="text-red-400 text-sm sm:text-base text-center">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
        );

      default:
        return <div className="text-gray-200">{currentContent.content}</div>;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-neutral-900 to-zinc-900">
      <Navbar />

      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6 lg:py-8">
        {/* Header */}
        <div className="mb-6 sm:mb-8">
          <Link
            href="/learning"
            className="inline-flex items-center text-yellow-400 hover:text-yellow-300 mb-4 text-sm sm:text-base"
          >
            <ArrowLeft size={16} className="mr-2 sm:mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
          </Link>

          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4">
            <div className="flex-1">
              <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-2 leading-tight">
                {module.title}
              </h1>
              <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4 text-gray-400 space-y-2 sm:space-y-0">
                <div className="flex items-center">
                  <BookOpen size={14} className="mr-1 sm:mr-1 flex-shrink-0" />
                  <span className="text-sm">
                    ‡∏ö‡∏ó‡∏ó‡∏µ‡πà {getModuleOrder(module.id)}: {module.title}
                  </span>
                </div>
                <div className="flex items-center">
                  <Clock size={14} className="mr-1 sm:mr-1 flex-shrink-0" />
                  <span className="text-sm">{module.estimatedTime}</span>
                </div>
              </div>
            </div>

            {/* Score Display */}
            {totalScore > 0 && (
              <div className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 backdrop-blur-sm rounded-xl p-3 sm:p-4 border border-yellow-500/30 w-full lg:w-auto">
                <div className="flex items-center justify-between lg:justify-start lg:space-x-4">
                  <div className="flex items-center space-x-2 sm:space-x-3">
                    <Star className="text-yellow-400 flex-shrink-0" size={20} />
                    <div>
                      <div className="text-yellow-400 font-bold text-base sm:text-lg">
                        {totalScore} ‡πÅ‡∏ï‡πâ‡∏°
                      </div>
                      <div className="text-yellow-300 text-xs sm:text-sm">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
                    </div>
                    <Zap className="text-orange-400 flex-shrink-0" size={16} />
                  </div>

                  <div className="text-xs sm:text-sm text-gray-300 text-right lg:text-left">
                    <div>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô:</div>
                    <div className="font-bold">{completedActivities.size}</div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mb-6 sm:mb-8">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs sm:text-sm text-gray-400">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
            <span className="text-xs sm:text-sm text-gray-400">
              {currentContentIndex + 1} / {currentChapter.content.length}
            </span>
          </div>
          <ProgressBar
            current={currentContentIndex + 1}
            total={currentChapter.content.length}
          />
        </div>

        {/* Chapter Navigation */}
        <div className="mb-6 sm:mb-8">
          <div className="flex space-x-1 sm:space-x-2 overflow-x-auto pb-2 scrollbar-hide">
            {module.chapters.map((chapter, index) => {
              const isCompleted =
                chapterProgress[chapter.id]?.completed || false;
              const isCurrent = index === currentChapterIndex;

              return (
                <button
                  key={chapter.id}
                  onClick={() => {
                    setCurrentChapterIndex(index);
                    setCurrentContentIndex(0);
                  }}
                  className={`px-3 sm:px-4 py-2 rounded-lg whitespace-nowrap transition-all flex items-center space-x-1 sm:space-x-2 text-sm flex-shrink-0 ${
                    isCurrent
                      ? "bg-yellow-500 text-black font-bold"
                      : isCompleted
                      ? "bg-green-500/20 text-green-400 border border-green-500"
                      : "bg-white/10 text-gray-300 hover:bg-white/20"
                  }`}
                >
                  {isCompleted && <CheckCircle size={14} className="flex-shrink-0" />}
                  <span className="hidden sm:inline">‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {index + 1}</span>
                  <span className="sm:hidden">{index + 1}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Content */}
        <div className="max-w-4xl mx-auto">
          {/* ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô */}
          {!canProceed && currentContent?.required && (
            <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-500/40 rounded-xl p-4 sm:p-6 mb-4 sm:mb-6">
              <div className="flex items-start sm:items-center mb-3">
                <Brain className="text-blue-400 mr-2 sm:mr-3 flex-shrink-0 mt-1 sm:mt-0" size={20} />
                <h3 className="text-lg sm:text-xl font-bold text-blue-300">
                  üéØ ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!
                </h3>
              </div>
              <p className="text-blue-200 mb-4 text-sm sm:text-base leading-relaxed">
                ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ô‡∏∞! üöÄ
              </p>
              <div className="bg-blue-600/20 rounded-lg p-3 sm:p-4 border border-blue-600/30">
                <p className="text-blue-300 text-xs sm:text-sm leading-relaxed">
                  ‚ú® <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong>{" "}
                  ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 
                  ‡∏´‡∏≤‡∏Å‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡∏Å‡πá‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞! üòä
                </p>
              </div>
            </div>
          )}

          {shouldDisplayCompletionScreen() ? (
            // Module Completed Screen
            <div className="bg-gradient-to-br from-green-500/20 to-blue-500/20 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 mb-6 sm:mb-8 border border-green-500/30 text-center">
              <div className="mb-4 sm:mb-6">
                <Trophy className="mx-auto text-yellow-400 mb-3 sm:mb-4" size={60} />
                <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-3 sm:mb-4">
                  ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!
                </h2>
                <p className="text-lg sm:text-xl text-gray-300 mb-2">‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö</p>
                <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-yellow-400 mb-4 sm:mb-6 px-4">
                  {module.title}
                </h3>
                <p className="text-gray-300 text-sm sm:text-base">‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</p>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8">
                <div className="bg-white/10 rounded-lg p-4 sm:p-6">
                  <BookOpen className="mx-auto text-blue-400 mb-2" size={28} />
                  <div className="text-xl sm:text-2xl font-bold text-white">
                    {module.chapters.length}
                  </div>
                  <div className="text-gray-400 text-sm sm:text-base">‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4 sm:p-6">
                  <Clock className="mx-auto text-purple-400 mb-2" size={28} />
                  <div className="text-xl sm:text-2xl font-bold text-white">
                    {module.estimatedTime}
                  </div>
                  <div className="text-gray-400 text-sm sm:text-base">‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</div>
                </div>
              </div>

              <div className="space-y-4 sm:space-y-6">
                {quiz ? (
                  <div className="bg-gradient-to-r from-orange-500/20 to-red-500/20 rounded-xl p-4 sm:p-6 lg:p-8 border-2 border-orange-500/40">
                    <div className="text-center mb-4 sm:mb-6">
                      <h4 className="text-xl sm:text-2xl font-bold text-orange-400 mb-2">
                        ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
                      </h4>
                      <p className="text-white text-base sm:text-lg mb-1 px-2">
                        ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î: {quiz.title}
                      </p>
                      <p className="text-gray-300 text-xs sm:text-sm px-4">
                        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ
                      </p>
                    </div>

                    <div className="text-center">
                      <Link
                        href={`/quiz/${(quiz as any).originalId || quiz.id}`}
                        className="px-6 sm:px-8 py-3 sm:py-4 bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white rounded-lg transition-all transform hover:scale-105 font-bold text-base sm:text-lg inline-flex items-center shadow-lg"
                      >
                        <Brain size={20} className="mr-2 sm:mr-3 flex-shrink-0" />
                        <span>‡πÑ‡∏õ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
                      </Link>
                    </div>

                    <div className="mt-4 sm:mt-6 flex flex-col sm:flex-row justify-center sm:space-x-6 space-y-2 sm:space-y-0 text-xs sm:text-sm text-gray-300">
                      <div className="flex items-center justify-center">
                        <Brain size={14} className="mr-1 text-orange-400 flex-shrink-0" />
                        {quiz.question?.questions?.length || 0} ‡∏Ç‡πâ‡∏≠
                      </div>
                      <div className="flex items-center justify-center">
                        <Clock size={14} className="mr-1 text-orange-400 flex-shrink-0" />
                        {quiz.timeLimit ? `${quiz.timeLimit} ‡∏ô‡∏≤‡∏ó‡∏µ` : "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î"}
                      </div>
                      <div className="flex items-center justify-center">
                        <Trophy size={14} className="mr-1 text-orange-400 flex-shrink-0" />
                        ‡∏ú‡πà‡∏≤‡∏ô {quiz.passingScore}%
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="bg-gray-500/20 rounded-lg p-4 sm:p-6 border border-gray-500/30">
                    <div className="text-center">
                      <Brain className="mx-auto text-gray-400 mb-3" size={40} />
                      <h4 className="text-base sm:text-lg font-semibold text-gray-400 mb-2">
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                      </h4>
                      <p className="text-gray-500 text-sm">
                        ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ
                      </p>
                    </div>
                  </div>
                )}

                <div className="flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
                  <button
                    onClick={() => {
                      setShouldShowCompletion(false);
                      setCurrentChapterIndex(0);
                      setCurrentContentIndex(0);
                    }}
                    className="px-4 sm:px-6 py-2 sm:py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-semibold inline-flex items-center justify-center text-sm sm:text-base"
                  >
                    <BookOpen size={18} className="mr-2 flex-shrink-0" />
                    <span>‡∏î‡∏π‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
                  </button>
                  
                  <Link
                    href="/learning"
                    className="px-4 sm:px-6 py-2 sm:py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors font-semibold inline-flex items-center justify-center text-sm sm:text-base"
                  >
                    <ArrowLeft size={18} className="mr-2 flex-shrink-0" />
                    <span>‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</span>
                  </Link>
                  
                  <Link
                    href="/quiz"
                    className="px-4 sm:px-6 py-2 sm:py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors font-semibold inline-flex items-center justify-center text-sm sm:text-base"
                  >
                    <Brain size={18} className="mr-2 flex-shrink-0" />
                    <span className="hidden sm:inline">‡∏î‡∏π‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                    <span className="sm:hidden">‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
                  </Link>
                </div>
              </div>
            </div>
          ) : (
            // Regular Learning Content
            <>
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-4 sm:p-6 lg:p-8 mb-6 sm:mb-8 border border-white/10">
                {renderContent()}
              </div>

              {/* Navigation Buttons */}
              <div className="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-4">
                <button
                  onClick={prevContent}
                  disabled={isFirstChapter && isFirstContent}
                  className={`flex items-center justify-center px-4 sm:px-6 py-3 rounded-lg font-semibold transition-all text-sm sm:text-base ${
                    isFirstChapter && isFirstContent
                      ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                      : "bg-gray-700 text-white hover:bg-gray-600"
                  }`}
                >
                  <ChevronLeft size={18} className="mr-2 flex-shrink-0" />
                  <span>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</span>
                </button>

                <div className="text-center px-4 order-first sm:order-none">
                  <div className="text-xs sm:text-sm text-gray-400 mb-1">
                    ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {currentChapterIndex + 1} ‡∏à‡∏≤‡∏Å {module.chapters.length}
                  </div>
                  <div className="text-base sm:text-lg font-semibold text-white line-clamp-2">
                    {currentChapter.title}
                  </div>
                </div>

                <button
                  onClick={nextContent}
                  disabled={
                    !canProceed || (isLastChapter && isLastContent && !quiz)
                  }
                  className={`flex items-center justify-center px-4 sm:px-6 py-3 rounded-lg font-semibold transition-all text-sm sm:text-base ${
                    !canProceed
                      ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                      : isLastChapter && isLastContent && !quiz
                      ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                      : isLastChapter && isLastContent && quiz
                      ? "bg-gradient-to-r from-green-500 to-teal-500 text-white hover:from-green-400 hover:to-teal-400"
                      : "bg-gradient-to-r from-yellow-500 to-orange-500 text-white hover:from-yellow-400 hover:to-orange-400"
                  }`}
                >
                  {!canProceed ? (
                    <>
                      <Brain size={18} className="mr-2 flex-shrink-0" />
                      <span className="hidden sm:inline">‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞! üéÆ</span>
                      <span className="sm:hidden">‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡πà‡∏≠‡∏ô</span>
                    </>
                  ) : isLastChapter && isLastContent && quiz ? (
                    <>
                      <Trophy size={18} className="mr-2 flex-shrink-0" />
                      <span className="hidden sm:inline">‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏õ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
                      <span className="sm:hidden">‡πÄ‡∏™‡∏£‡πá‡∏à - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
                    </>
                  ) : (
                    <>
                      <span>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</span>
                      <ChevronRight size={18} className="ml-2 flex-shrink-0" />
                    </>
                  )}
                </button>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Background Stars Effect */}
      <div className="fixed inset-0 pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-1 h-1 bg-white rounded-full animate-pulse"></div>
        <div className="absolute top-1/3 right-1/3 w-1 h-1 bg-white rounded-full animate-pulse delay-100"></div>
        <div className="absolute bottom-1/4 left-1/3 w-1 h-1 bg-white rounded-full animate-pulse delay-200"></div>
        <div className="absolute bottom-1/3 right-1/4 w-1 h-1 bg-white rounded-full animate-pulse delay-300"></div>
      </div>
    </div>
  );
}
