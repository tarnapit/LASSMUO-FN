import { PlayerProgress, StageProgress } from '../types/stage';
import { ModuleProgress, LearningProgress, ChapterProgress } from '../types/learning';
import { QuizProgress, QuizAttempt } from '../types/quiz';
import { MiniGameAttempt, GameStats } from '../types/mini-game';
import { authManager } from './auth';
import { userCourseProgressService } from './api/services';
import { userStageProgressService } from './api/services/userStageProgressService';

class ProgressManager {
  private tempProgressKey = 'astronomy_temp_progress';
  private userProgressKey = 'astronomy_user_progress';

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• progress ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getProgress(): PlayerProgress {
    if (authManager.isLoggedIn()) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å user progress
      return this.getUserProgress();
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session storage (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
      return this.getTempProgress();
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress
  saveProgress(progress: PlayerProgress): void {
    if (authManager.isLoggedIn()) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏≤‡∏ß‡∏£
      this.saveUserProgress(progress);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      this.saveTempProgress(progress);
    }
  }

  // ====== NEW API Integration Methods ======

  // ‡πÇ‡∏´‡∏•‡∏î progress ‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞ merge ‡∏Å‡∏±‡∏ö local storage
  async loadProgressFromAPI(): Promise<void> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, using local progress only');
        return;
      }

      console.log(`Loading progress from API for user ${user.id}`);

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mini-game progress ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö localStorage
      let existingMiniGameStats = null;
      if (typeof window !== 'undefined') {
        // ‡∏´‡∏≤ mini-game stats ‡∏à‡∏≤‡∏Å user key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const userKey = `${this.userProgressKey}_${user.id}`;
        const existingProgress = localStorage.getItem(userKey);
        if (existingProgress) {
          const parsedProgress = JSON.parse(existingProgress);
          existingMiniGameStats = parsedProgress.miniGameStats;
          console.log('üéÆ Preserved mini-game stats:', existingMiniGameStats);
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user key ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å player-progress (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API)
          const tempProgress = localStorage.getItem('player-progress');
          if (tempProgress) {
            const parsedTempProgress = JSON.parse(tempProgress);
            existingMiniGameStats = parsedTempProgress.miniGameStats;
            console.log('üéÆ Preserved mini-game stats from temp storage:', existingMiniGameStats);
          }
        }
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• course progress
      const userProgress = await userCourseProgressService.getUserCourseProgressByUserId(user.id);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stage progress ‡∏à‡∏≤‡∏Å API
      const stageProgressResponse = await userStageProgressService.getUserProgress(user.id);
      
      console.log('üîç Raw API responses:', {
        courseProgress: userProgress,
        stageProgress: stageProgressResponse
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      let hasValidCourseData = false;
      if (userProgress && Array.isArray(userProgress)) {
        hasValidCourseData = userProgress.some((item: any) => !item.userId || item.userId === user.id);
      } else if (userProgress?.success && Array.isArray(userProgress.data)) {
        hasValidCourseData = userProgress.data.some((item: any) => !item.userId || item.userId === user.id);
      }
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ current progress ‡∏´‡∏£‡∏∑‡∏≠ default progress
      let localProgress = this.getProgress();
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ progress ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
      if (!hasValidCourseData && (!localProgress || localProgress.totalPoints === 0)) {
        console.log('üÜï No valid API data and no local progress, using fresh defaults');
        localProgress = this.getDefaultProgress();
      } else if (!hasValidCourseData) {
        console.log('üì± No valid API data but keeping existing local progress');
      } else {
        console.log('üîÑ Valid API data found, will merge with local progress');
      }
      
      // ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mini-game progress ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
      if (existingMiniGameStats) {
        localProgress.miniGameStats = existingMiniGameStats;
        console.log('üéÆ Restored mini-game stats to new progress:', {
          attempts: existingMiniGameStats.attempts?.length || 0,
          totalScore: existingMiniGameStats.totalScore || 0,
          completedGames: existingMiniGameStats.attempts ? new Set(existingMiniGameStats.attempts.map((a: any) => a.gameId)).size : 0
        });
      } else {
        console.log('üéÆ No existing mini-game stats found - starting fresh');
      }
      
      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• course progress
      await this.processCourseProgress(localProgress, userProgress);
      
      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• stage progress ‡∏à‡∏≤‡∏Å API
      await this.processStageProgress(localProgress, stageProgressResponse);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å merged progress
      this.saveProgress(localProgress);
      
      console.log('‚úÖ Progress merged and saved locally with mini-game stats preserved');
    } catch (error) {
      console.error('Error loading progress from API:', error);
    }
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• course progress ‡∏à‡∏≤‡∏Å API
  private async processCourseProgress(localProgress: PlayerProgress, userProgress: any): Promise<void> {
    // Handle different response formats
    let progressData = null;
    if (userProgress && userProgress.success && userProgress.data && userProgress.data.length > 0) {
      progressData = userProgress.data;
      console.log('‚úÖ User course progress loaded from API (wrapped format):', progressData);
    } else if (Array.isArray(userProgress) && userProgress.length > 0) {
      progressData = userProgress;
      console.log('‚úÖ User course progress loaded from API (direct array format):', progressData);
    }
    
    if (progressData) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á learning progress structure ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!localProgress.learningProgress) {
        localProgress.learningProgress = {
          completedModules: [],
          totalLearningTime: 0,
          modules: {}
        };
      }

      progressData.forEach((apiProgress: any) => {
        const moduleId = apiProgress.courseId;
        const currentUser = authManager.getCurrentUser();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á ‡πÜ 
        const isCorrectUser = !apiProgress.userId || apiProgress.userId === currentUser?.id;
        const hasActualProgress = (apiProgress.progressPercent && apiProgress.progressPercent > 0) || 
                                (apiProgress.completed === true);
        
        console.log(`üîç Processing course progress for ${moduleId}:`, {
          progressPercent: apiProgress.progressPercent,
          completed: apiProgress.completed,
          userId: apiProgress.userId,
          currentUserId: currentUser?.id,
          isCorrectUser,
          hasActualProgress
        });
        
        // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        if (isCorrectUser && hasActualProgress) {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module progress ‡∏à‡∏≤‡∏Å API
          if (!localProgress.learningProgress!.modules[moduleId]) {
            localProgress.learningProgress!.modules[moduleId] = {
              moduleId,
              isStarted: true,
              isCompleted: apiProgress.completed || false,
              completedChapters: [],
              totalTimeSpent: 0,
              chapters: {}
            };
          } else {
            // Merge ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            localProgress.learningProgress!.modules[moduleId].isCompleted = 
              localProgress.learningProgress!.modules[moduleId].isCompleted || apiProgress.completed;
          }

          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ progressPercent ‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì completedChapters
          if (apiProgress.progressPercent && apiProgress.progressPercent > 0) {
            const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
            const completedChapterCount = Math.floor((apiProgress.progressPercent / 100) * expectedChapters.length);
            
            for (let i = 0; i < completedChapterCount; i++) {
              const chapterId = expectedChapters[i];
              if (chapterId && !localProgress.learningProgress!.modules[moduleId].completedChapters.includes(chapterId)) {
                localProgress.learningProgress!.modules[moduleId].completedChapters.push(chapterId);
                
                localProgress.learningProgress!.modules[moduleId].chapters[chapterId] = {
                  moduleId,
                  chapterId,
                  completed: true,
                  readProgress: 100,
                  timeSpent: 5,
                  completedAt: new Date()
                };
              }
            }
          }

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô completed modules ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
          if (apiProgress.completed && !localProgress.learningProgress!.completedModules.includes(moduleId)) {
            localProgress.learningProgress!.completedModules.push(moduleId);
          }
          
          console.log(`‚úÖ Updated progress for ${moduleId}`);
        } else {
          if (!isCorrectUser) {
            console.log(`‚ö†Ô∏è Skipped ${moduleId} - wrong user data (expected: ${currentUser?.id}, got: ${apiProgress.userId})`);
          } else if (!hasActualProgress) {
            console.log(`‚ö†Ô∏è Skipped ${moduleId} - no actual progress`);
          }
        }
      });

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å course API data
      this.updateScoresFromAPI(progressData);
    }
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• stage progress ‡∏à‡∏≤‡∏Å API
  private async processStageProgress(localProgress: PlayerProgress, stageProgressResponse: any): Promise<void> {
    let stageProgressData = null;
    
    // Handle different response formats
    if (stageProgressResponse && stageProgressResponse.success && stageProgressResponse.data) {
      stageProgressData = stageProgressResponse.data;
      console.log('‚úÖ User stage progress loaded from API (wrapped format):', stageProgressData);
    } else if (Array.isArray(stageProgressResponse)) {
      stageProgressData = stageProgressResponse;
      console.log('‚úÖ User stage progress loaded from API (direct array format):', stageProgressData);
    }
    
    if (stageProgressData && Array.isArray(stageProgressData) && stageProgressData.length > 0) {
      console.log('üìä Processing stage progress from API...');
      
      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stage ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô
      stageProgressData.forEach((apiStageProgress: any) => {
        const stageId = apiStageProgress.stageId;
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó stage progress ‡∏à‡∏≤‡∏Å API
        if (!localProgress.stages[stageId]) {
          localProgress.stages[stageId] = {
            stageId,
            isUnlocked: true,
            isCompleted: false,
            stars: 0,
            bestScore: 0,
            attempts: 0,
            xpEarned: 0,
            perfectRuns: 0,
            averageTime: 0,
            mistakeCount: 0,
            hintsUsed: 0,
            achievements: []
          };
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        const stageProgress = localProgress.stages[stageId];
        stageProgress.isCompleted = apiStageProgress.isCompleted || false;
        stageProgress.bestScore = Math.max(stageProgress.bestScore, apiStageProgress.bestScore || 0);
        stageProgress.stars = Math.max(stageProgress.stars, apiStageProgress.starsEarned || 0);
        stageProgress.attempts = Math.max(stageProgress.attempts, apiStageProgress.attempts || 0);
        
        if (apiStageProgress.lastAttemptAt) {
          stageProgress.lastAttempt = new Date(apiStageProgress.lastAttemptAt);
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó completed stages list
        if (apiStageProgress.isCompleted && !localProgress.completedStages.includes(stageId)) {
          localProgress.completedStages.push(stageId);
        }
        
        // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å stage ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if (apiStageProgress.isCompleted) {
          const nextStageId = stageId + 1;
          if (nextStageId <= 5) {
            if (!localProgress.stages[nextStageId]) {
              localProgress.stages[nextStageId] = {
                stageId: nextStageId,
                isUnlocked: true,
                isCompleted: false,
                stars: 0,
                bestScore: 0,
                attempts: 0,
                xpEarned: 0,
                perfectRuns: 0,
                averageTime: 0,
                mistakeCount: 0,
                hintsUsed: 0,
                achievements: []
              };
            } else {
              localProgress.stages[nextStageId].isUnlocked = true;
            }
          }
        }
        
        console.log(`üìä Stage ${stageId} updated from API:`, {
          completed: apiStageProgress.isCompleted,
          bestScore: apiStageProgress.bestScore,
          stars: apiStageProgress.starsEarned,
          attempts: apiStageProgress.attempts
        });
      });
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalStars ‡∏à‡∏≤‡∏Å stage progress
      localProgress.totalStars = Object.values(localProgress.stages).reduce((sum, stage) => sum + (stage.stars || 0), 0);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó currentStage ‡πÄ‡∏õ‡πá‡∏ô stage ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
      const maxUnlockedStage = Math.max(...Object.values(localProgress.stages)
        .filter(stage => stage.isUnlocked)
        .map(stage => stage.stageId));
      localProgress.currentStage = maxUnlockedStage;
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó totalPoints ‡∏à‡∏≤‡∏Å stage scores
      const stageScore = Object.values(localProgress.stages).reduce((sum, stage) => sum + (stage.bestScore || 0), 0);
      localProgress.totalPoints = (localProgress.totalPoints || 0) + stageScore;
      
      console.log('üìä Stage progress summary:', {
        totalStagesLoaded: stageProgressData.length,
        totalStars: localProgress.totalStars,
        completedStages: localProgress.completedStages.length,
        currentStage: localProgress.currentStage,
        totalPoints: localProgress.totalPoints
      });
    } else {
      console.log('‚ÑπÔ∏è No stage progress found in API');
    }
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å API data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  private updateScoresFromAPI(progressData: any[]): void {
    const progress = this.getProgress();
    
    if (!progressData || progressData.length === 0) return;
    
    let totalScoreFromAPI = 0;
    let completedModulesCount = 0;
    
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å API data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÅ‡∏ï‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
  progressData.forEach((apiProgress: any) => {
    const currentUser = authManager.getCurrentUser();
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    const isCorrectUser = !apiProgress.userId || apiProgress.userId === currentUser?.id;
    const hasActualProgress = (apiProgress.progressPercent && apiProgress.progressPercent > 0) || 
                            (apiProgress.completed === true);
    
    if (apiProgress.totalScore && isCorrectUser && hasActualProgress) {
      totalScoreFromAPI += apiProgress.totalScore;
      console.log(`üìä Added ${apiProgress.totalScore} points from course ${apiProgress.courseId} (progress: ${apiProgress.progressPercent}%, user: ${apiProgress.userId})`);
    } else if (apiProgress.totalScore) {
      if (!isCorrectUser) {
        console.log(`‚ö†Ô∏è Skipped ${apiProgress.totalScore} points from course ${apiProgress.courseId} - wrong user (expected: ${currentUser?.id}, got: ${apiProgress.userId})`);
      } else if (!hasActualProgress) {
        console.log(`‚ö†Ô∏è Skipped ${apiProgress.totalScore} points from course ${apiProgress.courseId} - no actual progress (progress: ${apiProgress.progressPercent}%, completed: ${apiProgress.completed})`);
      }
    }
    
    if ((apiProgress.progressPercent === 100 || apiProgress.completed) && isCorrectUser && hasActualProgress) {
      completedModulesCount++;
    }
  });    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å API (‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å stages ‡πÅ‡∏•‡∏∞ mini-games)
    const existingNonLearningScore = this.getNonLearningScore(progress);
    progress.totalPoints = existingNonLearningScore + totalScoreFromAPI;
    
    console.log('üìä Updated scores from API:', {
      apiProgressData: progressData.map(p => ({ courseId: p.courseId, totalScore: p.totalScore, progressPercent: p.progressPercent })),
      completedModules: completedModulesCount,
      totalScoreFromAPI: totalScoreFromAPI,
      existingNonLearningScore: existingNonLearningScore,
      finalTotalPoints: progress.totalPoints,
      // ‡∏î‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏à‡∏≤‡∏Å stage system)
      totalStars: progress.totalStars,
      completedStages: progress.completedStages.length
    });
    
    this.saveProgress(progress);
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≤‡∏Å learning (stages, mini-games, etc.)
  private getNonLearningScore(progress: PlayerProgress): number {
    let nonLearningScore = 0;
    
    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å stages
    if (progress.stages) {
      Object.values(progress.stages).forEach((stage: any) => {
        if (stage.bestScore) {
          nonLearningScore += stage.bestScore;
        }
      });
    }
    
    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å mini-games
    if (progress.miniGameStats && progress.miniGameStats.totalScore) {
      nonLearningScore += progress.miniGameStats.totalScore;
    }
    
    console.log('üìä Non-learning score calculated:', {
      stageScore: progress.stages ? Object.values(progress.stages).reduce((sum: number, stage: any) => sum + (stage.bestScore || 0), 0) : 0,
      miniGameScore: progress.miniGameStats?.totalScore || 0,
      total: nonLearningScore
    });
    
    return nonLearningScore;
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å learning progress (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
  private updateScoresFromLearning(): void {
    const progress = this.getProgress();
    
    if (!progress.learningProgress) return;
    
    let totalLearningScore = 0;
    let completedModulesCount = 0;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å learning modules (fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ API)
    Object.values(progress.learningProgress.modules).forEach((moduleProgress: any) => {
      if (moduleProgress.isCompleted) {
        totalLearningScore += 100; // 100 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ module ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        completedModulesCount++;
      } else if (moduleProgress.completedChapters && moduleProgress.completedChapters.length > 0) {
        // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å chapters ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        const chapterScore = moduleProgress.completedChapters.length * 20; // 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≠ chapter
        totalLearningScore += chapterScore;
      }
    });
    
    // ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å stages ‡πÅ‡∏•‡∏∞ mini-games
    const existingNonLearningScore = this.getNonLearningScore(progress);
    progress.totalPoints = existingNonLearningScore + totalLearningScore;
    
    console.log('üìö Updated learning scores (fallback):', {
      completedModules: completedModulesCount,
      totalLearningScore: totalLearningScore,
      existingNonLearningScore: existingNonLearningScore,
      totalPoints: progress.totalPoints,
      // ‡∏î‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏î‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° (‡∏à‡∏≤‡∏Å stage system)
      totalStars: progress.totalStars,
      completedStages: progress.completedStages.length
    });
    
    this.saveProgress(progress);
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å learning progress ‡∏ú‡πà‡∏≤‡∏ô API
  async saveChapterProgressToAPI(
    moduleId: string, 
    chapterId: string, 
    contentId: string,
    score: number = 0,
    isCompleted: boolean = true
  ): Promise<void> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, progress saved locally only');
        return;
      }

      console.log(`Saving chapter progress to API for course: ${moduleId}`);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress (‡πÉ‡∏ä‡πâ UPSERT ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ backend)
      const progressData = {
        userId: user.id,
        courseId: moduleId,
        totalScore: score,
        progressPercent: isCompleted ? 100 : score, // ‡πÉ‡∏ä‡πâ progressPercent ‡∏ï‡∏≤‡∏° Prisma schema
        totalStars: 0, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ó‡∏µ‡πà backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        unlockedAt: new Date().toISOString() // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
      };

      const response = await userCourseProgressService.createUserCourseProgress(progressData);
      
      if (response && response.success) {
        console.log('‚úÖ Chapter progress saved to API successfully');
      } else if (response && response.data) {
        // API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ success flag
        console.log('‚úÖ Chapter progress saved to API (fallback)');
      } else if (response && (response as any).id) {
        // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ wrapper
        console.log('‚úÖ Chapter progress saved to API (direct response)');
      } else if (response === null || response === undefined) {
        // API ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô 201 ‡πÅ‡∏ï‡πà response ‡πÄ‡∏õ‡πá‡∏ô null - ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô duplicate constraint error
        console.log('‚ö†Ô∏è API returned 201 Created but response is null');
        console.log('üí° This is likely due to unique constraint violation (userId + courseId already exists)');
        console.log('üìù Backend needs to use UPSERT instead of CREATE');
        console.log('‚úÖ Progress is still saved locally as backup');
      } else {
        console.warn('‚ö†Ô∏è API progress save failed:', response?.error || 'Unknown error');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è API not available, using local storage only:', error);
    }
  }

  // ‡∏î‡∏∂‡∏á learning progress ‡∏à‡∏≤‡∏Å API
  async getModuleProgressFromAPI(moduleId: string): Promise<any> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, returning local progress');
        return null;
      }

      console.log(`Fetching module progress from API for user ${user.id}, course ${moduleId}`);
      
      const response = await userCourseProgressService.getUserProgressForCourse(user.id, moduleId);
      
      if (response && response.success && response.data) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (!response.data.userId || response.data.userId === user.id) {
          console.log('‚úÖ Module progress fetched from API:', response.data);
          return response.data;
        } else {
          console.log(`‚ùå API returned data for different user. Expected: ${user.id}, Got: ${response.data.userId}`);
          return null;
        }
      } else if (response && Array.isArray(response) && response.length > 0) {
        // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const userProgress = response.find((item: any) => !item.userId || item.userId === user.id);
        if (userProgress) {
          console.log('‚úÖ Module progress fetched from API (array format):', userProgress);
          return userProgress;
        } else {
          console.log(`‚ùå No progress found for current user in API array. User ID: ${user.id}`);
          return null;
        }
      } else {
        console.log('No progress found in API for this module');
        return null;
      }
    } catch (error) {
      console.error('Error fetching module progress from API:', error);
      return null;
    }
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module completion ‡∏ú‡πà‡∏≤‡∏ô API
  async markModuleCompletedInAPI(moduleId: string, finalScore: number = 100): Promise<void> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, module completion saved locally only');
        return;
      }

      console.log(`Marking module ${moduleId} as completed in API for user ${user.id} with score ${finalScore}`);
      
      // ‡πÉ‡∏ä‡πâ UPSERT ‡πÅ‡∏ó‡∏ô UPDATE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ 404
      const progressData = {
        userId: user.id,
        courseId: moduleId,
        totalScore: finalScore,
        progressPercent: 100, // ‡πÉ‡∏ä‡πâ progressPercent ‡πÅ‡∏ó‡∏ô progress
        totalStars: 0, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ó‡∏µ‡πà backend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        unlockedAt: new Date().toISOString() // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
      };

      const response = await userCourseProgressService.createUserCourseProgress(progressData);
      
      if (response && response.success) {
        console.log('‚úÖ Module progress created/updated and marked completed');
      } else if (response && response.data) {
        // API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ success flag
        console.log('‚úÖ Module progress created/updated (fallback)');
      } else if (response && (response as any).id) {
        // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ wrapper
        console.log('‚úÖ Module progress created/updated (direct response)');
      } else if (response === null || response === undefined) {
        // API ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô 201 ‡πÅ‡∏ï‡πà response ‡πÄ‡∏õ‡πá‡∏ô null - UPSERT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
        console.log('‚ö†Ô∏è Module completion API returned 201 but response is null');
        console.log('üí° This is normal for UPSERT operations - data was likely saved');
      } else {
        console.warn('‚ö†Ô∏è API module creation failed:', response?.error || 'Unknown error');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è API not available for module completion, using local storage only:', error);
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ progress ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API
  async getUserStatsFromAPI(): Promise<any> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        return null;
      }

      const response = await userCourseProgressService.getUserProgressStats(user.id);
      
      if (response && response.success && response.data) {
        console.log('‚úÖ User stats fetched from API:', response.data);
        return response.data;
      } else {
        console.log('No user stats found in API');
        return null;
      }
    } catch (error) {
      console.error('Error fetching user stats from API:', error);
      return null;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• progress ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (sessionStorage - ‡∏´‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö)
  private getTempProgress(): PlayerProgress {
    if (typeof window === 'undefined') {
      return this.getDefaultProgress();
    }

    const saved = sessionStorage.getItem(this.tempProgressKey);
    if (saved) {
      return JSON.parse(saved);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ stage 1 ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å
    return this.getDefaultProgress();
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  private saveTempProgress(progress: PlayerProgress): void {
    if (typeof window !== 'undefined') {
      sessionStorage.setItem(this.tempProgressKey, JSON.stringify(progress));
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• progress ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  private getUserProgress(): PlayerProgress {
    if (typeof window === 'undefined') {
      return this.getDefaultProgress();
    }

    const user = authManager.getCurrentUser();
    if (!user) {
      return this.getDefaultProgress();
    }

    const userKey = `${this.userProgressKey}_${user.id}`;
    const saved = localStorage.getItem(userKey);
    
    if (saved) {
      return JSON.parse(saved);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏°‡∏µ temp progress ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ migrate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const tempProgress = this.getTempProgress();
    if (tempProgress.totalStars > 0 || tempProgress.completedStages.length > 0) {
      this.saveUserProgress(tempProgress);
      this.clearTempProgress();
      return tempProgress;
    }

    return this.getDefaultProgress();
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  private saveUserProgress(progress: PlayerProgress): void {
    if (typeof window === 'undefined') return;

    const user = authManager.getCurrentUser();
    if (!user) return;

    const userKey = `${this.userProgressKey}_${user.id}`;
    localStorage.setItem(userKey, JSON.stringify(progress));
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• progress ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  private clearTempProgress(): void {
    if (typeof window !== 'undefined') {
      sessionStorage.removeItem(this.tempProgressKey);
    }
  }

  // Progress ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - stage 1 ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  private getDefaultProgress(): PlayerProgress {
    return {
      totalStars: 0,
      totalPoints: 0,
      totalXp: 0,
      gems: 0,
      currentStreak: 0,
      longestStreak: 0,
      hearts: 5,
      maxHearts: 5,
      completedStages: [],
      currentStage: 1,
      stages: {
        1: {
          stageId: 1,
          isUnlocked: true, // stage ‡πÅ‡∏£‡∏Å‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          isCompleted: false,
          stars: 0,
          bestScore: 0,
          attempts: 0,
          xpEarned: 0,
          perfectRuns: 0,
          averageTime: 0,
          mistakeCount: 0,
          hintsUsed: 0,
          achievements: []
        }
      },
      achievements: [],
      badges: [],
      learningProgress: {
        completedModules: [],
        totalLearningTime: 0,
        modules: {}
      },
      quizProgress: {
        quizzes: {}
      },
      miniGameStats: {
        gamesPlayed: 0,
        totalScore: 0,
        averageScore: 0,
        bestScore: 0,
        totalTimeSpent: 0,
        streakDays: 0,
        achievements: [],
        scoreChallengeBest: 0,
        timeRushBest: 0,
        randomQuizBest: 0,
        attempts: [],
        lastPlayedAt: undefined
      },
      dailyGoal: {
        xpTarget: 50,
        currentXp: 0,
        isCompleted: false,
        streak: 0
      },
      weeklyProgress: {
        mondayXp: 0,
        tuesdayXp: 0,
        wednesdayXp: 0,
        thursdayXp: 0,
        fridayXp: 0,
        saturdayXp: 0,
        sundayXp: 0
      },
      league: {
        currentLeague: 'bronze',
        position: 0,
        xpThisWeek: 0
      }
    };
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ progress ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  debugProgress(): void {
    const progress = this.getProgress();
    console.log('üîç Current Progress Debug:', {
      totalStars: progress.totalStars,
      totalPoints: progress.totalPoints,
      completedStages: progress.completedStages,
      currentStage: progress.currentStage,
      stageDetails: Object.entries(progress.stages).map(([id, stage]) => ({
        stageId: id,
        isUnlocked: stage.isUnlocked,
        isCompleted: stage.isCompleted,
        stars: stage.stars,
        bestScore: stage.bestScore,
        attempts: stage.attempts
      })),
      calculatedTotalStars: Object.values(progress.stages).reduce((sum, stage) => sum + (stage.stars || 0), 0),
      learningProgress: progress.learningProgress ? {
        completedModules: progress.learningProgress.completedModules.length,
        modulesStarted: Object.keys(progress.learningProgress.modules).length
      } : null
    });
  }

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalStars ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API)
  async recalculateTotalStars(): Promise<void> {
    const progress = this.getProgress();
    const calculatedStars = Object.values(progress.stages).reduce((sum, stage) => sum + (stage.stars || 0), 0);
    const calculatedPoints = Object.values(progress.stages).reduce((sum, stage) => sum + (stage.bestScore || 0), 0);
    
    let hasChanges = false;
    
    if (progress.totalStars !== calculatedStars) {
      console.log('‚ö†Ô∏è Total stars mismatch detected! Fixing...', {
        currentTotalStars: progress.totalStars,
        calculatedStars: calculatedStars,
        stages: Object.entries(progress.stages).map(([id, s]) => ({ id, stars: s.stars }))
      });
      
      progress.totalStars = calculatedStars;
      hasChanges = true;
      
      console.log('‚úÖ Total stars fixed to:', calculatedStars);
    }

    if (progress.totalPoints !== calculatedPoints) {
      console.log('‚ö†Ô∏è Total points mismatch detected! Fixing...', {
        currentTotalPoints: progress.totalPoints,
        calculatedPoints: calculatedPoints,
        stages: Object.entries(progress.stages).map(([id, s]) => ({ id, bestScore: s.bestScore }))
      });
      
      progress.totalPoints = calculatedPoints;
      hasChanges = true;
      
      console.log('‚úÖ Total points fixed to:', calculatedPoints);
    }

    if (hasChanges) {
      this.saveProgress(progress);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà)
    const user = authManager.getCurrentUser();
    if (user && user.id) {
      try {
        const stageProgressResponse = await userStageProgressService.getUserProgress(user.id);
        
        if (stageProgressResponse && stageProgressResponse.success && stageProgressResponse.data) {
          const apiStars = stageProgressResponse.data.reduce((sum: number, stageProgress: any) => sum + (stageProgress.starsEarned || 0), 0);
          
          if (apiStars > calculatedStars) {
            console.log('üåü API has more recent star data, updating...', {
              localStars: calculatedStars,
              apiStars: apiStars
            });
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≤‡∏Å API
            await this.loadProgressFromAPI();
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Could not check API stars:', error);
      }
    }
  }

  // ====== Quiz Progress Methods ======
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å quiz attempt
  saveQuizAttempt(quizId: string, attempt: QuizAttempt): void {
    const progress = this.getProgress();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á quiz progress structure ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!progress.quizProgress) {
      progress.quizProgress = { quizzes: {} };
    }
    
    if (!progress.quizProgress.quizzes[quizId]) {
      progress.quizProgress.quizzes[quizId] = {
        quizId,
        attempts: [],
        bestScore: 0,
        bestPercentage: 0,
        totalAttempts: 0,
        passed: false
      };
    }
    
    const quizProgress = progress.quizProgress.quizzes[quizId];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° attempt ‡πÉ‡∏´‡∏°‡πà
    quizProgress.attempts.push(attempt);
    quizProgress.totalAttempts = quizProgress.attempts.length;
    quizProgress.lastAttemptAt = attempt.completedAt;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    quizProgress.bestScore = Math.max(quizProgress.bestScore, attempt.score);
    quizProgress.bestPercentage = Math.max(quizProgress.bestPercentage, attempt.percentage);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡πà‡∏≤‡∏ô
    const previouslyPassed = quizProgress.passed;
    quizProgress.passed = quizProgress.attempts.some(a => a.passed);
    
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô quiz ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module progress
    if (!previouslyPassed && quizProgress.passed && attempt.passed) {
      const moduleId = this.getModuleIdByQuizId(quizId);
      if (moduleId) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ async function
        this.completeModuleByQuiz(moduleId).then(() => {
          console.log(`Module ${moduleId} marked as completed due to quiz ${quizId} completion`);
        }).catch(error => {
          console.error(`Failed to complete module ${moduleId}:`, error);
        });
      }
    }
    
    this.saveProgress(progress);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress ‡πÅ‡∏ö‡∏ö force ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ UI ‡∏à‡∏∞ refresh
    if (typeof window !== 'undefined') {
      // Trigger a custom event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ components ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress
      window.dispatchEvent(new CustomEvent('progressUpdated', { 
        detail: { type: 'quiz', quizId, moduleId: this.getModuleIdByQuizId(quizId) }
      }));
    }
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quiz progress
  getQuizProgress(quizId: string): QuizProgress | null {
    const progress = this.getProgress();
    return progress.quizProgress?.quizzes[quizId] || null;
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quiz progress ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAllQuizProgress(): Record<string, QuizProgress> {
    const progress = this.getProgress();
    return progress.quizProgress?.quizzes || {};
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ quiz ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  canRetakeQuiz(quizId: string, maxAttempts?: number): boolean {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
    return true;
    
    // ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡∏ñ‡∏π‡∏Å comment ‡πÑ‡∏ß‡πâ)
    // if (!maxAttempts) return true;
    // const quizProgress = this.getQuizProgress(quizId);
    // if (!quizProgress) return true;
    // return quizProgress.totalAttempts < maxAttempts;
  }
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï quiz progress (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤/‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  resetQuizProgress(quizId?: string): void {
    const progress = this.getProgress();
    
    if (!progress.quizProgress) return;
    
    if (quizId) {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ quiz ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      delete progress.quizProgress.quizzes[quizId];
    } else {
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      progress.quizProgress.quizzes = {};
    }
    
    this.saveProgress(progress);
  }

  // ====== Mini-Game Progress Methods ======
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå mini-game
  saveMiniGameAttempt(attempt: MiniGameAttempt): void {
    const progress = this.getProgress();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mini-game stats structure ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!progress.miniGameStats) {
      progress.miniGameStats = {
        gamesPlayed: 0,
        totalScore: 0,
        averageScore: 0,
        bestScore: 0,
        totalTimeSpent: 0,
        streakDays: 0,
        achievements: [],
        attempts: [],
        scoreChallengeBest: 0,
        timeRushBest: 0,
        randomQuizBest: 0
      };
    }
    
    const stats = progress.miniGameStats;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° attempt ‡πÉ‡∏´‡∏°‡πà
    stats.attempts.push(attempt);
    stats.gamesPlayed = stats.attempts.length;
    stats.lastPlayedAt = attempt.completedAt || new Date();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    stats.totalScore += attempt.score;
    stats.averageScore = Math.round(stats.totalScore / stats.gamesPlayed);
    stats.bestScore = Math.max(stats.bestScore, attempt.score);
    stats.totalTimeSpent += attempt.timeSpent;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î
    switch (attempt.gameMode) {
      case 'score-challenge':
        stats.scoreChallengeBest = Math.max(stats.scoreChallengeBest, attempt.score);
        break;
      case 'time-rush':
        stats.timeRushBest = Math.max(stats.timeRushBest, attempt.score);
        break;
      case 'random-quiz':
        stats.randomQuizBest = Math.max(stats.randomQuizBest, attempt.score);
        break;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó XP ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    const xpGained = Math.floor(attempt.score / 10) + (attempt.percentage >= 80 ? 20 : 0);
    progress.totalXp += xpGained;
    progress.totalPoints += attempt.score;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ achievements
    this.checkMiniGameAchievements(stats);
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó daily goal
    progress.dailyGoal.currentXp += xpGained;
    if (progress.dailyGoal.currentXp >= progress.dailyGoal.xpTarget && !progress.dailyGoal.isCompleted) {
      progress.dailyGoal.isCompleted = true;
      progress.dailyGoal.streak += 1;
      progress.currentStreak = progress.dailyGoal.streak;
      progress.longestStreak = Math.max(progress.longestStreak, progress.currentStreak);
    }
    
    this.saveProgress(progress);
    
    // Trigger event
    if (typeof window !== 'undefined') {
      window.dispatchEvent(new CustomEvent('progressUpdated', { 
        detail: { type: 'miniGame', gameMode: attempt.gameMode, score: attempt.score }
      }));
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö achievements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini-game
  private checkMiniGameAchievements(stats: GameStats): void {
    const newAchievements: string[] = [];
    
    // First game achievement
    if (stats.gamesPlayed === 1 && !stats.achievements.includes('first-game')) {
      newAchievements.push('first-game');
    }
    
    // Perfect score achievement
    if (stats.attempts.some(a => a.percentage === 100) && !stats.achievements.includes('perfect-score')) {
      newAchievements.push('perfect-score');
    }
    
    // Speed demon achievement (score > 1000 in time-rush)
    if (stats.timeRushBest >= 1000 && !stats.achievements.includes('speed-demon')) {
      newAchievements.push('speed-demon');
    }
    
    // Score master achievement (score > 1500 in score-challenge)
    if (stats.scoreChallengeBest >= 1500 && !stats.achievements.includes('score-master')) {
      newAchievements.push('score-master');
    }
    
    // Knowledge expert achievement (80%+ in all three modes)
    const hasGoodScoreInAllModes = 
      stats.attempts.some(a => a.gameMode === 'score-challenge' && a.percentage >= 80) &&
      stats.attempts.some(a => a.gameMode === 'time-rush' && a.percentage >= 80) &&
      stats.attempts.some(a => a.gameMode === 'random-quiz' && a.percentage >= 80);
    
    if (hasGoodScoreInAllModes && !stats.achievements.includes('knowledge-expert')) {
      newAchievements.push('knowledge-expert');
    }
    
    // Add new achievements
    stats.achievements.push(...newAchievements);
  }
  
  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ mini-game
  getMiniGameStats(): GameStats | null {
    const progress = this.getProgress();
    return progress.miniGameStats || null;
  }
  
  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
  getMiniGameHistory(gameMode?: string): MiniGameAttempt[] {
    const stats = this.getMiniGameStats();
    if (!stats) return [];
    
    if (gameMode) {
      return stats.attempts.filter(a => a.gameMode === gameMode);
    }
    
    return stats.attempts;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  hasPlayedGameMode(gameMode: string): boolean {
    const stats = this.getMiniGameStats();
    if (!stats) return false;
    
    return stats.attempts.some(a => a.gameMode === gameMode);
  }
  
  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï mini-game stats (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤/‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  resetMiniGameStats(): void {
    const progress = this.getProgress();
    progress.miniGameStats = {
      gamesPlayed: 0,
      totalScore: 0,
      averageScore: 0,
      bestScore: 0,
      totalTimeSpent: 0,
      streakDays: 0,
      achievements: [],
      attempts: [],
      scoreChallengeBest: 0,
      timeRushBest: 0,
      randomQuizBest: 0
    };
    this.saveProgress(progress);
  }

  // ====== Helper Methods ======
  migrateOldQuizData(): void {
    if (typeof window === 'undefined') return;

    const progress = this.getProgress();
    let hasUpdates = false;

    // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ quiz ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö
    const knownQuizzes = ['solar-system-quiz', 'earth-structure-quiz', 'stellar-evolution-quiz', 'galaxies-universe-quiz'];

    knownQuizzes.forEach(quizId => {
      const oldKey = `quiz-progress-${quizId}`;
      const oldData = localStorage.getItem(oldKey);
      
      if (oldData) {
        try {
          const oldProgress = JSON.parse(oldData);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (!progress.quizProgress) {
            progress.quizProgress = { quizzes: {} };
          }
          
          if (!progress.quizProgress.quizzes[quizId] && oldProgress.attempts && oldProgress.attempts.length > 0) {
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
            progress.quizProgress.quizzes[quizId] = {
              quizId: oldProgress.quizId,
              attempts: oldProgress.attempts,
              bestScore: oldProgress.bestScore,
              bestPercentage: oldProgress.bestPercentage,
              totalAttempts: oldProgress.totalAttempts,
              passed: oldProgress.passed,
              lastAttemptAt: oldProgress.lastAttemptAt ? new Date(oldProgress.lastAttemptAt) : undefined
            };
            
            hasUpdates = true;
            
            // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô quiz ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module progress
            if (oldProgress.passed) {
              const moduleId = this.getModuleIdByQuizId(quizId);
              if (moduleId) {
                this.completeModuleByQuiz(moduleId);
              }
            }
            
            console.log(`Migrated quiz data for ${quizId}:`, oldProgress);
          }
          
          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
          localStorage.removeItem(oldKey);
        } catch (error) {
          console.error(`Error migrating quiz data for ${quizId}:`, error);
        }
      }
    });

    if (hasUpdates) {
      this.saveProgress(progress);
      console.log('Quiz data migration completed');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö module id ‡∏à‡∏≤‡∏Å quiz id
  private getModuleIdByQuizId(quizId: string): string | null {
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏õ quiz ‡∏Å‡∏±‡∏ö module (‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏Å quizzes.ts ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞ hardcode)
    const quizModuleMapping: Record<string, string> = {
      'solar-system-quiz': 'solar-system',
      'earth-structure-quiz': 'earth-structure',
      'stellar-evolution-quiz': 'stellar-evolution',
      'galaxies-universe-quiz': 'galaxies-universe'
    };
    
    return quizModuleMapping[quizId] || null;
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module progress ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥ quiz ‡∏ú‡πà‡∏≤‡∏ô
  async completeModuleByQuiz(moduleId: string): Promise<void> {
    const progress = this.getProgress();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á learning progress structure ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!progress.learningProgress) {
      progress.learningProgress = {
        completedModules: [],
        totalLearningTime: 0,
        modules: {}
      };
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á module progress ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!progress.learningProgress.modules[moduleId]) {
      progress.learningProgress.modules[moduleId] = {
        moduleId,
        isStarted: true,
        isCompleted: false,
        completedChapters: [],
        totalTimeSpent: 0,
        chapters: {}
      };
    }

    const moduleProgress = progress.learningProgress.modules[moduleId];
    
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô module
    if (!moduleProgress.isCompleted) {
      moduleProgress.isCompleted = true;
      moduleProgress.completedAt = new Date();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô completed modules ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!progress.learningProgress.completedModules.includes(moduleId)) {
        progress.learningProgress.completedModules.push(moduleId);
      }

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 100%)
      // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Solar System ‡∏°‡∏µ 3 chapters
      const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
      expectedChapters.forEach(chapterId => {
        if (!moduleProgress.completedChapters.includes(chapterId)) {
          moduleProgress.completedChapters.push(chapterId);
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° chapter progress ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if (!moduleProgress.chapters[chapterId]) {
          moduleProgress.chapters[chapterId] = {
            chapterId,
            moduleId,
            completed: true,
            readProgress: 100,
            timeSpent: 0,
            completedAt: new Date()
          } as ChapterProgress;
        } else {
          moduleProgress.chapters[chapterId].completed = true;
          moduleProgress.chapters[chapterId].readProgress = 100;
        }
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô local storage
      this.saveProgress(progress);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô API (‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà)
      try {
        const finalScore = 100; // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥ quiz ‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ 100%
        await this.markModuleCompletedInAPI(moduleId, finalScore);
      } catch (error) {
        console.warn('Failed to mark module as completed in API:', error);
      }
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö chapter ids ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ï‡∏≤‡∏° module (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô public)
  getExpectedChaptersByModuleId(moduleId: string): string[] {
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏ó‡∏µ‡πà‡∏°‡∏µ chapter IDs ‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
    const progress = this.getProgress();
    const moduleProgress = progress.learningProgress?.modules[moduleId];
    
    if (moduleProgress && moduleProgress.completedChapters && moduleProgress.completedChapters.length > 0) {
      return moduleProgress.completedChapters;
    }
    
    // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ chapters object ‡πÉ‡∏ô moduleProgress
    if (moduleProgress && moduleProgress.chapters) {
      const chapterIds = Object.keys(moduleProgress.chapters);
      if (chapterIds.length > 0) {
        return chapterIds;
      }
    }

    // Fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö moduleId ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏£‡∏≤‡∏ö
    const moduleChapters: Record<string, string[]> = {
      'ba3fd565-dc81-4e74-b253-ef0a4074f8cf': [
        'f23f104f-3690-4ca8-a3fc-dfbec284e9ae', // Introduction to Solar System
        'a1b2c3d4-5678-9abc-def0-1234567890ab', // The Eight Planets  
        'b2c3d4e5-6789-abcd-ef01-234567890abc'  // Special Features of Planets
      ],
      '4db710de-f734-4c7e-bf5f-a5645847b5bc': [
        'c3d4e5f6-789a-bcde-f012-34567890abcd', // Earth Layers
        'd4e5f6g7-89ab-cdef-0123-4567890abcde', // Atmosphere
        'e5f6g7h8-9abc-def0-1234-567890abcdef'  // Magnetic Field
      ],
      // Keep old fallback for backward compatibility
      'solar-system': ['chapter-1', 'chapter-2', 'chapter-3'],
      'earth-structure': ['chapter-1', 'chapter-2', 'chapter-3', 'chapter-4'],
      'stellar-evolution': ['chapter-1', 'chapter-2', 'chapter-3', 'chapter-4'],
      'galaxies-universe': ['chapter-1', 'chapter-2', 'chapter-3', 'chapter-4']
    };
    
    const chapters = moduleChapters[moduleId] || [];
    console.log(`üìä Using fallback chapters for module ${moduleId}:`, chapters);
    return chapters;
  }

  // ====== Stage Progress Methods ======

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó progress ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏î‡πà‡∏≤‡∏ô
  async completeStage(stageId: number, stars: number, score: number): Promise<PlayerProgress> {
    const progress = this.getProgress();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó stage ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    if (!progress.stages[stageId]) {
      progress.stages[stageId] = {
        stageId,
        isUnlocked: true,
        isCompleted: false,
        stars: 0,
        bestScore: 0,
        attempts: 0,
        xpEarned: 0,
        perfectRuns: 0,
        averageTime: 0,
        mistakeCount: 0,
        hintsUsed: 0,
        achievements: []
      };
    }

    const stageProgress = progress.stages[stageId];
    const previousBestScore = stageProgress.bestScore;
    const previousStars = stageProgress.stars;
    
    stageProgress.attempts++;
    stageProgress.lastAttempt = new Date();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    stageProgress.bestScore = Math.max(stageProgress.bestScore, score);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
    if (score > 0) {
      stageProgress.isCompleted = true;
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏≤‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
      stageProgress.stars = Math.max(stageProgress.stars, stars);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ completed stages ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô
      if (!progress.completedStages.includes(stageId)) {
        progress.completedStages.push(stageId);
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó total points (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°)
      if (score > previousBestScore) {
        const scoreDifference = score - previousBestScore;
        progress.totalPoints += scoreDifference;
      }

      // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å stage ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô)
      const nextStageId = stageId + 1;
      if (nextStageId <= 5) {
        if (!progress.stages[nextStageId]) {
          progress.stages[nextStageId] = {
            stageId: nextStageId,
            isUnlocked: true,
            isCompleted: false,
            stars: 0,
            bestScore: 0,
            attempts: 0,
            xpEarned: 0,
            perfectRuns: 0,
            averageTime: 0,
            mistakeCount: 0,
            hintsUsed: 0,
            achievements: []
          };
        } else {
          progress.stages[nextStageId].isUnlocked = true;
        }
      }
    }

    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó total stars ‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å stage (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    progress.totalStars = Object.values(progress.stages).reduce((sum, stage) => sum + (stage.stars || 0), 0);
    
    console.log('‚≠ê Stage completion update:', {
      stageId,
      starsEarned: stars,
      scoreEarned: score,
      previousStars: previousStars,
      newStageStars: stageProgress.stars,
      totalStarsCalculated: progress.totalStars,
      allStages: Object.entries(progress.stages).map(([id, s]) => ({ id, stars: s.stars, completed: s.isCompleted }))
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡πÉ‡∏ô local storage
    this.saveProgress(progress);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å progress ‡πÉ‡∏ô API (‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà)
    await this.saveStageProgressToAPI(stageId, score, stars, stageProgress.isCompleted, stageProgress.attempts);
    
    return progress;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å stage progress ‡∏ú‡πà‡∏≤‡∏ô API
  async saveStageProgressToAPI(
    stageId: number,
    currentScore: number,
    starsEarned: number,
    isCompleted: boolean,
    attempts: number
  ): Promise<void> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, stage progress saved locally only');
        return;
      }

      console.log(`Saving stage progress to API for stage: ${stageId}`);

      const progressData = {
        isCompleted,
        currentScore,
        bestScore: currentScore, // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ current score ‡∏Ñ‡∏∑‡∏≠ best score
        starsEarned,
        attempts,
        lastAttemptAt: new Date().toISOString(),
        completedAt: isCompleted ? new Date().toISOString() : undefined
      };

      const response = await userStageProgressService.upsertProgress(user.id, stageId, progressData);
      
      if (response && response.success) {
        console.log('‚úÖ Stage progress saved to API successfully:', response.data);
      } else if (response && response.data) {
        console.log('‚úÖ Stage progress saved to API (fallback format)');
      } else {
        console.warn('‚ö†Ô∏è API stage progress save response unclear:', response);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è API not available for stage progress, using local storage only:', error);
    }
  }

  // ‡∏î‡∏∂‡∏á stage progress ‡∏à‡∏≤‡∏Å API
  async getStageProgressFromAPI(stageId: number): Promise<any> {
    try {
      const user = authManager.getCurrentUser();
      if (!user || !user.id) {
        console.log('User not logged in, returning local stage progress');
        return null;
      }

      console.log(`Fetching stage progress from API for user ${user.id}, stage ${stageId}`);
      
      const response = await userStageProgressService.getUserStageProgress(user.id, stageId);
      
      if (response && response.success && response.data) {
        console.log('‚úÖ Stage progress fetched from API:', response.data);
        return response.data;
      } else if (response && (response as any).id) {
        // ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        console.log('‚úÖ Stage progress fetched from API (direct format):', response);
        return response;
      } else {
        console.log('No stage progress found in API for stage:', stageId);
        return null;
      }
    } catch (error) {
      console.error('Error fetching stage progress from API:', error);
      return null;
    }
  }

  // ====== Learning Progress Methods ======

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô module ‡πÉ‡∏´‡∏°‡πà
  startLearningModule(moduleId: string): void {
    const progress = this.getProgress();
    
    if (!progress.learningProgress) {
      progress.learningProgress = {
        completedModules: [],
        totalLearningTime: 0,
        modules: {}
      };
    }

    if (!progress.learningProgress.modules[moduleId]) {
      progress.learningProgress.modules[moduleId] = {
        moduleId,
        isStarted: true,
        isCompleted: false,
        completedChapters: [],
        totalTimeSpent: 0,
        chapters: {}
      };
    } else {
      progress.learningProgress.modules[moduleId].isStarted = true;
    }

    this.saveProgress(progress);
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï progress ‡∏Ç‡∏≠‡∏á chapter
  async updateChapterProgress(
    moduleId: string, 
    chapterId: string, 
    readProgress: number = 100,
    timeSpent: number = 0,
    isCompleted: boolean = true
  ): Promise<PlayerProgress> {
    const progress = this.getProgress();
    
    if (!progress.learningProgress) {
      progress.learningProgress = {
        completedModules: [],
        totalLearningTime: 0,
        modules: {}
      };
    }

    if (!progress.learningProgress.modules[moduleId]) {
      this.startLearningModule(moduleId);
    }

    const moduleProgress = progress.learningProgress.modules[moduleId];

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó chapter progress (local storage)
    moduleProgress.chapters[chapterId] = {
      moduleId,
      chapterId,
      completed: isCompleted,
      readProgress,
      timeSpent,
      completedAt: isCompleted ? new Date() : undefined
    } as ChapterProgress;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó completed chapters
    if (isCompleted && !moduleProgress.completedChapters.includes(chapterId)) {
      moduleProgress.completedChapters.push(chapterId);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°
    moduleProgress.totalTimeSpent += timeSpent;
    progress.learningProgress.totalLearningTime += timeSpent;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô local storage
    this.saveProgress(progress);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô API (‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà)
    try {
      await this.saveChapterProgressToAPI(
        moduleId,
        chapterId,
        `content-${chapterId}-1`, // default content ID
        readProgress,
        isCompleted
      );
    } catch (error) {
      console.warn('Failed to save chapter progress to API:', error);
    }

    return progress;
  }

  // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô module
  async completeModule(moduleId: string, totalChapters: number): Promise<PlayerProgress> {
    const progress = this.getProgress();
    
    if (!progress.learningProgress?.modules[moduleId]) {
      return progress;
    }

    const moduleProgress = progress.learningProgress.modules[moduleId];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏ö‡∏ó‡∏∏‡∏Å chapter ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (moduleProgress.completedChapters.length >= totalChapters) {
      moduleProgress.isCompleted = true;
      moduleProgress.completedAt = new Date();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô completed modules ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!progress.learningProgress.completedModules.includes(moduleId)) {
        progress.learningProgress.completedModules.push(moduleId);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô local storage
      this.saveProgress(progress);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô API (‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà)
      try {
        const finalScore = this.getModuleCompletionPercentage(moduleId);
        await this.markModuleCompletedInAPI(moduleId, finalScore);
      } catch (error) {
        console.warn('Failed to mark module as completed in API:', error);
      }
    }

    return progress;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• learning progress ‡∏Ç‡∏≠‡∏á module
  getModuleProgress(moduleId: string): ModuleProgress | null {
    const progress = this.getProgress();
    return progress.learningProgress?.modules[moduleId] || null;
  }

  // ====== Module Progress Methods (Extended) ======

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á module (‡∏£‡∏ß‡∏° API data)
  async getModuleCompletionPercentageWithAPI(moduleId: string, totalChapters?: number): Promise<number> {
    console.log(`üîç Getting progress for module ${moduleId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô
    const user = authManager.getCurrentUser();
    if (user && user.id) {
      console.log(`üë§ User logged in: ${user.id}, fetching API progress...`);
      try {
        const moduleProgressFromAPI = await this.getModuleProgressFromAPI(moduleId);
        console.log(`üåê API response for ${moduleId}:`, moduleProgressFromAPI);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
        if (moduleProgressFromAPI && moduleProgressFromAPI.userId === user.id) {
          if (moduleProgressFromAPI.progressPercent && moduleProgressFromAPI.progressPercent > 0) {
            console.log(`üìä Using API progress for ${moduleId}: ${moduleProgressFromAPI.progressPercent}%`);
            return moduleProgressFromAPI.progressPercent;
          } else if (moduleProgressFromAPI.completed === true && moduleProgressFromAPI.progressPercent === 100) {
            console.log(`üìä Module ${moduleId} is completed via API, returning 100%`);
            return 100;
          } else {
            console.log(`‚ùå No valid progress in API response for ${moduleId} (progressPercent: ${moduleProgressFromAPI?.progressPercent}, completed: ${moduleProgressFromAPI?.completed})`);
          }
        } else {
          console.log(`‚ùå API returned data for different user or no data for ${moduleId}. Expected userId: ${user.id}, Got userId: ${moduleProgressFromAPI?.userId}`);
        }
      } catch (error) {
        console.log(`‚ùå Failed to get API progress for ${moduleId}:`, error);
      }
      
      // ‡∏•‡∏≠‡∏á fallback ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å all user progress ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
      try {
        const allUserProgress = await userCourseProgressService.getUserCourseProgressByUserId(user.id);
        if (allUserProgress && allUserProgress.success && allUserProgress.data) {
          const moduleData = allUserProgress.data.find((p: any) => p.courseId === moduleId);
          if (moduleData) {
            console.log(`üìä Found progress in user data for ${moduleId}:`, moduleData);
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ progress ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
            if (moduleData.userId === user.id) {
              if ((moduleData as any).progressPercent && (moduleData as any).progressPercent > 0) {
                console.log(`üìä Using fallback progress for ${moduleId}: ${(moduleData as any).progressPercent}%`);
                return (moduleData as any).progressPercent;
              } else if (moduleData.completed === true && (moduleData as any).progressPercent === 100) {
                console.log(`üìä Using fallback completed for ${moduleId}: 100%`);
                return 100;
              } else {
                console.log(`‚ùå No valid fallback progress for ${moduleId} (progressPercent: ${(moduleData as any).progressPercent}, completed: ${moduleData.completed})`);
              }
            } else {
              console.log(`‚ùå Fallback data is for different user. Expected userId: ${user.id}, Got userId: ${moduleData.userId}`);
            }
          }
        }
      } catch (error) {
        console.log(`‚ùå Failed to get user progress data:`, error);
      }
    } else {
      console.log('‚ùå User not logged in, using local progress only');
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÉ‡∏ä‡πâ local progress
    const localProgress = this.getModuleCompletionPercentage(moduleId, totalChapters);
    console.log(`üì± Using local progress for ${moduleId}: ${localProgress}%`);
    
    return localProgress;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á module
  getModuleCompletionPercentage(moduleId: string, totalChapters?: number): number {
    const moduleProgress = this.getModuleProgress(moduleId);
    if (!moduleProgress) {
      console.log(`üìä No module progress found for ${moduleId}`);
      return 0;
    }

    console.log(`üìä Module progress for ${moduleId}:`, {
      moduleProgress,
      isCompleted: moduleProgress.isCompleted,
      completedChapters: moduleProgress.completedChapters
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ totalChapters ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• modules ‡∏à‡∏£‡∏¥‡∏á
    if (!totalChapters) {
      const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
      totalChapters = expectedChapters.length;
    }

    if (totalChapters === 0) {
      console.log(`üìä No chapters found for module ${moduleId}`);
      return 0;
    }

    // ‡∏ñ‡πâ‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 100%
    if (moduleProgress.isCompleted) {
      console.log(`üìä Module ${moduleId} is completed, returning 100%`);
      return 100;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (60% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°)
    const completedChapters = moduleProgress.completedChapters.length;
    const readingProgress = (completedChapters / totalChapters) * 60;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î/‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (40% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°)
    const quizProgress = this.getModuleQuizProgress(moduleId);
    
    const totalProgress = readingProgress + quizProgress;
    
    console.log(`üìä Module ${moduleId} progress calculation:`, {
      completedChapters,
      totalChapters,
      readingProgress,
      quizProgress,
      totalProgress,
      isCompleted: moduleProgress.isCompleted
    });

    return Math.min(Math.round(totalProgress), 100);
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î/‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á module
  getModuleQuizProgress(moduleId: string): number {
    const progress = this.getProgress();
    if (!progress.quizProgress) {
      return 0;
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ quiz ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö module ‡∏ô‡∏µ‡πâ
    const moduleQuizzes = Object.values(progress.quizProgress.quizzes).filter(
      quiz => this.getModuleIdByQuizId(quiz.quizId) === moduleId
    );

    console.log(`üìä Found ${moduleQuizzes.length} quizzes for module ${moduleId}:`, moduleQuizzes.map(q => q.quizId));

    if (moduleQuizzes.length === 0) return 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å quiz ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á module
    let totalScore = 0;
    let quizCount = 0;

    moduleQuizzes.forEach(quiz => {
      if (quiz.attempts && quiz.attempts.length > 0) {
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        totalScore += quiz.bestPercentage;
        quizCount++;
      }
    });

    if (quizCount === 0) {
      return 0;
      return 0;
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 40% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å quiz ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô 40% ‡∏Ç‡∏≠‡∏á progress)
    const averageQuizScore = totalScore / quizCount;
    const quizProgressContribution = (averageQuizScore / 100) * 40;
    
    console.log(`üìä Module ${moduleId} quiz progress: ${averageQuizScore}% avg ‚Üí ${quizProgressContribution}% contribution`);
    
    return quizProgressContribution;
    
    return quizProgressContribution;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ module ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (70%)
  isModulePassed(moduleId: string): boolean {
    const totalProgress = this.getModuleCompletionPercentage(moduleId);
    return totalProgress >= 70;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ module ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå 100% ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isModulePerfect(moduleId: string): boolean {
    const moduleProgress = this.getModuleProgress(moduleId);
    if (!moduleProgress) return false;

    // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å chapter
    const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
    const hasReadAllChapters = moduleProgress.completedChapters.length >= expectedChapters.length && expectedChapters.length > 0;

    // ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ quiz ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° (100%)
    const progress = this.getProgress();
    if (!progress.quizProgress) return false;

    const moduleQuizzes = Object.values(progress.quizProgress.quizzes).filter(
      quiz => this.getModuleIdByQuizId(quiz.quizId) === moduleId
    );

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ quiz ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà perfect (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    if (moduleQuizzes.length === 0) return false;

    const hasPassedAllQuizzesWithPerfectScore = moduleQuizzes.every(quiz => 
      quiz.attempts && quiz.attempts.length > 0 && quiz.bestPercentage === 100
    );

    return hasReadAllChapters && hasPassedAllQuizzesWithPerfectScore;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó module progress ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô chapters ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async checkAndCompleteModule(moduleId: string): Promise<void> {
    const progress = this.getProgress();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á learning progress structure ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!progress.learningProgress) {
      progress.learningProgress = {
        completedModules: [],
        totalLearningTime: 0,
        modules: {}
      };
    }

    const moduleProgress = progress.learningProgress.modules[moduleId];
    
    if (!moduleProgress || moduleProgress.isCompleted) return;

    const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
    const completedChapters = moduleProgress.completedChapters.length;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ó‡∏∏‡∏Å chapter ‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏£‡∏ß‡∏° 70% ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const hasReadAllChapters = completedChapters >= expectedChapters.length && expectedChapters.length > 0;
    const hasPassedOverallCriteria = this.isModulePassed(moduleId); // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏£‡∏ß‡∏°

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏£‡∏ß‡∏° ‡πÉ‡∏´‡πâ mark ‡πÄ‡∏õ‡πá‡∏ô completed
    if (hasReadAllChapters && hasPassedOverallCriteria) {
      moduleProgress.isCompleted = true;
      moduleProgress.completedAt = new Date();

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô completed modules ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!progress.learningProgress.completedModules.includes(moduleId)) {
        progress.learningProgress.completedModules.push(moduleId);
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô local storage
      this.saveProgress(progress);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô API (‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà)
      try {
        const finalScore = this.getModuleCompletionPercentage(moduleId);
        await this.markModuleCompletedInAPI(moduleId, finalScore);
      } catch (error) {
        console.warn('Failed to mark module as completed in API:', error);
      }
    }
  }

  // ====== Quiz Unlock Methods ======

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isQuizUnlocked(quizId: string): boolean {
    const progress = this.getProgress();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• quiz ‡πÅ‡∏•‡∏∞ module ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const moduleId = this.getModuleIdByQuizId(quizId);
    if (!moduleId) return false;

    const moduleProgress = this.getModuleProgress(moduleId);
    if (!moduleProgress) return false;

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å: ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 60% ‡∏Ç‡∏≠‡∏á module
    const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
    const requiredChapters = Math.ceil(expectedChapters.length * 0.6); // 60% ‡∏Ç‡∏≠‡∏á chapters
    const completedChapters = moduleProgress.completedChapters.length;

    return completedChapters >= requiredChapters;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î
  getQuizUnlockRequirements(quizId: string): {
    isUnlocked: boolean;
    moduleId: string | null;
    moduleTitle: string;
    requiredChapters: number;
    completedChapters: number;
    requiredPercentage: number;
    currentPercentage: number;
    remainingChapters: string[];
  } {
    const moduleId = this.getModuleIdByQuizId(quizId);
    
    if (!moduleId) {
      return {
        isUnlocked: false,
        moduleId: null,
        moduleTitle: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        requiredChapters: 0,
        completedChapters: 0,
        requiredPercentage: 60,
        currentPercentage: 0,
        remainingChapters: []
      };
    }

    const moduleProgress = this.getModuleProgress(moduleId);
    const expectedChapters = this.getExpectedChaptersByModuleId(moduleId);
    const requiredChapters = Math.ceil(expectedChapters.length * 0.6); // 60%
    const completedChapters = moduleProgress?.completedChapters.length || 0;
    const currentPercentage = expectedChapters.length > 0 ? (completedChapters / expectedChapters.length) * 100 : 0;
    const isUnlocked = completedChapters >= requiredChapters;

    // ‡∏´‡∏≤ chapters ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
    const completedChapterIds = moduleProgress?.completedChapters || [];
    const remainingChapters = expectedChapters.filter(chapterId => 
      !completedChapterIds.includes(chapterId)
    );

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ module
    let moduleTitle = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    try {
      const { learningModules } = require('../data/learning-modules');
      const module = learningModules.find((m: any) => m.id === moduleId);
      moduleTitle = module?.title || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    } catch (error) {
      console.warn('Error loading module title:', error);
    }

    return {
      isUnlocked,
      moduleId,
      moduleTitle,
      requiredChapters,
      completedChapters,
      requiredPercentage: 60,
      currentPercentage: Math.round(currentPercentage),
      remainingChapters
    };
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAllQuizUnlockStatus(): Record<string, boolean> {
    const knownQuizzes = ['solar-system-quiz', 'earth-structure-quiz', 'stellar-evolution-quiz', 'galaxies-universe-quiz'];
    const unlockStatus: Record<string, boolean> = {};

    knownQuizzes.forEach(quizId => {
      unlockStatus[quizId] = this.isQuizUnlocked(quizId);
    });

    return unlockStatus;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chapter progress
  getChapterProgress(moduleId: string, chapterId: string): ChapterProgress | null {
    const moduleProgress = this.getModuleProgress(moduleId);
    return moduleProgress?.chapters[chapterId] || null;
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏ß‡∏° (‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API)
  async getLearningStats() {
    const progress = this.getProgress();
    
    if (!progress.learningProgress) {
      return {
        totalModulesStarted: 0,
        totalModulesCompleted: 0,
        totalLearningTime: 0,
        averageModuleProgress: 0
      };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà)
    const user = authManager.getCurrentUser();
    let apiCompletedCount = 0;
    let apiStartedCount = 0;
    
    if (user && user.id) {
      try {
        const userProgress = await userCourseProgressService.getUserCourseProgressByUserId(user.id);
        let progressData = null;
        
        if (userProgress && userProgress.success && userProgress.data) {
          progressData = userProgress.data;
        } else if (Array.isArray(userProgress)) {
          progressData = userProgress;
        }
        
        if (progressData && progressData.length > 0) {
          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          const userProgressData = progressData.filter((p: any) => 
            !p.userId || p.userId === user.id
          );
          
          console.log('üîç Filtered learning stats:', {
            totalData: progressData.length,
            userProgressData: userProgressData.length,
            currentUserId: user.id,
            allUserIds: progressData.map((p: any) => p.userId)
          });
          
          // ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å API data ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          apiStartedCount = userProgressData.length;
          apiCompletedCount = userProgressData.filter((p: any) => 
            p.progressPercent === 100 || p.completed
          ).length;
          
          console.log('üìä Learning stats from API:', {
            started: apiStartedCount,
            completed: apiCompletedCount,
            progressData: userProgressData.map((p: any) => ({
              courseId: p.courseId,
              progressPercent: p.progressPercent,
              completed: p.completed,
              userId: p.userId
            }))
          });
          
          return {
            totalModulesStarted: apiStartedCount,
            totalModulesCompleted: apiCompletedCount,
            totalLearningTime: progress.learningProgress.totalLearningTime,
            averageModuleProgress: apiStartedCount > 0 ? Math.round((apiCompletedCount / apiStartedCount) * 100) : 0
          };
        }
      } catch (error) {
        console.log('üîÑ API not available, using local data:', error);
      }
    }

    // Fallback ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• local
    const modules = Object.values(progress.learningProgress.modules);
    const startedModules = modules.filter(m => m.isStarted);
    const completedModules = modules.filter(m => m.isCompleted);
    
    const averageProgress = modules.length > 0
      ? modules.reduce((sum, module) => {
          const expectedChapters = this.getExpectedChaptersByModuleId(module.moduleId);
          const totalChapters = expectedChapters.length || 3; // fallback to 3 if can't determine
          const completion = (module.completedChapters.length / totalChapters) * 100;
          return sum + completion;
        }, 0) / modules.length
      : 0;

    console.log('üìä Learning stats from local:', {
      started: startedModules.length,
      completed: completedModules.length
    });

    return {
      totalModulesStarted: startedModules.length,
      totalModulesCompleted: completedModules.length,
      totalLearningTime: progress.learningProgress.totalLearningTime,
      averageModuleProgress: Math.round(averageProgress)
    };
  }

  // Migrate progress ‡πÄ‡∏°‡∏∑‡πà‡∏≠ login - ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å temp storage ‡πÑ‡∏õ user storage
  migrateProgressOnLogin(): void {
    if (typeof window === 'undefined') return;

    const user = authManager.getCurrentUser();
    if (!user) return;

    // ‡∏î‡∏∂‡∏á temp progress
    const tempProgress = this.getTempProgress();
    
    // ‡∏î‡∏∂‡∏á user progress ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const existingUserProgress = this.getUserProgress();
    
    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° progress
    const mergedProgress = this.mergeProgress(existingUserProgress, tempProgress);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô user progress
    this.saveUserProgress(mergedProgress);
    
    // ‡∏•‡∏ö temp progress
    this.clearTempProgress();
    
    console.log('Progress migrated successfully on login');
  }

  // ‡∏£‡∏ß‡∏° progress 2 ‡∏≠‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
  private mergeProgress(existing: PlayerProgress, temp: PlayerProgress): PlayerProgress {
    const merged: PlayerProgress = { ...existing };

    // ‡∏£‡∏ß‡∏° stars ‡πÅ‡∏•‡∏∞ points
    merged.totalStars = Math.max(existing.totalStars, temp.totalStars);
    merged.totalPoints = Math.max(existing.totalPoints, temp.totalPoints);
    merged.totalXp = Math.max(existing.totalXp || 0, temp.totalXp || 0);
    merged.gems = Math.max(existing.gems || 0, temp.gems || 0);
    
    // ‡∏£‡∏ß‡∏° completed stages
    const allCompletedStages = [...new Set([...existing.completedStages, ...temp.completedStages])];
    merged.completedStages = allCompletedStages;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó current stage ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    merged.currentStage = Math.max(existing.currentStage, temp.currentStage);

    // ‡∏£‡∏ß‡∏° stage progress
    for (const stageId in temp.stages) {
      const tempStage = temp.stages[stageId];
      const existingStage = existing.stages[stageId];

      if (!existingStage) {
        merged.stages[stageId] = tempStage;
      } else {
        merged.stages[stageId] = {
          ...existingStage,
          isUnlocked: existingStage.isUnlocked || tempStage.isUnlocked,
          isCompleted: existingStage.isCompleted || tempStage.isCompleted,
          stars: Math.max(existingStage.stars, tempStage.stars),
          bestScore: Math.max(existingStage.bestScore, tempStage.bestScore),
          attempts: Math.max(existingStage.attempts, tempStage.attempts),
          xpEarned: Math.max(existingStage.xpEarned || 0, tempStage.xpEarned || 0),
          perfectRuns: Math.max(existingStage.perfectRuns || 0, tempStage.perfectRuns || 0),
          averageTime: Math.max(existingStage.averageTime || 0, tempStage.averageTime || 0),
          mistakeCount: Math.min(existingStage.mistakeCount || 0, tempStage.mistakeCount || 0),
          hintsUsed: Math.min(existingStage.hintsUsed || 0, tempStage.hintsUsed || 0)
        };
      }
    }

    // ‡∏£‡∏ß‡∏° learning progress
    if (temp.learningProgress && merged.learningProgress) {
      // ‡∏£‡∏ß‡∏° completed modules
      const allCompletedModules = [...new Set([
        ...merged.learningProgress.completedModules,
        ...temp.learningProgress.completedModules
      ])];
      merged.learningProgress.completedModules = allCompletedModules;

      // ‡∏£‡∏ß‡∏° learning time
      merged.learningProgress.totalLearningTime += temp.learningProgress.totalLearningTime;

      // ‡∏£‡∏ß‡∏° module progress
      for (const moduleId in temp.learningProgress.modules) {
        const tempModule = temp.learningProgress.modules[moduleId];
        const existingModule = merged.learningProgress.modules[moduleId];

        if (!existingModule) {
          merged.learningProgress.modules[moduleId] = tempModule;
        } else {
          merged.learningProgress.modules[moduleId] = {
            ...existingModule,
            isCompleted: existingModule.isCompleted || tempModule.isCompleted,
            completedAt: existingModule.completedAt || tempModule.completedAt,
            totalTimeSpent: Math.max(existingModule.totalTimeSpent, tempModule.totalTimeSpent)
          };
        }
      }
    }

    // ‡∏£‡∏ß‡∏° quiz progress
    if (temp.quizProgress && merged.quizProgress) {
      for (const quizId in temp.quizProgress.quizzes) {
        const tempQuiz = temp.quizProgress.quizzes[quizId];
        const existingQuiz = merged.quizProgress.quizzes[quizId];

        if (!existingQuiz) {
          merged.quizProgress.quizzes[quizId] = tempQuiz;
        } else {
          merged.quizProgress.quizzes[quizId] = {
            ...existingQuiz,
            attempts: [...existingQuiz.attempts, ...tempQuiz.attempts],
            totalAttempts: existingQuiz.totalAttempts + tempQuiz.totalAttempts,
            bestScore: Math.max(existingQuiz.bestScore, tempQuiz.bestScore),
            bestPercentage: Math.max(existingQuiz.bestPercentage, tempQuiz.bestPercentage),
            passed: existingQuiz.passed || tempQuiz.passed,
            lastAttemptAt: tempQuiz.lastAttemptAt || existingQuiz.lastAttemptAt
          };
        }
      }
    }

    return merged;
  }
}

export const progressManager = new ProgressManager();

// Export debug function for development
export const debugProgressSystem = async () => {
  progressManager.debugProgress();
  await progressManager.recalculateTotalStars();
};
