import { progressManager } from './progress';
import { MiniGameAttempt, GameResult } from '../types/mini-game';

export class MiniGameProgressHelper {
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á MiniGameAttempt ‡∏à‡∏≤‡∏Å GameResult
  static createAttemptFromResult(
    gameId: string, 
    gameMode: string, 
    result: GameResult, 
    answers: Record<string, any> = {},
    questionTimes: Record<string, number> = {}
  ): MiniGameAttempt {
    const now = new Date();
    
    return {
      id: `${gameMode}-${now.getTime()}`,
      gameId,
      gameMode: gameMode as any,
      answers,
      score: result.score,
      totalQuestions: result.totalQuestions,
      correctAnswers: result.correctAnswers,
      percentage: result.percentage,
      timeSpent: result.timeSpent,
      bonusPoints: result.bonusPoints,
      startedAt: new Date(now.getTime() - (result.timeSpent * 1000)),
      completedAt: now,
      questionTimes
    };
  }
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡∏°
  static saveGameResult(
    gameId: string,
    gameMode: string,
    result: GameResult,
    answers: Record<string, any> = {},
    questionTimes: Record<string, number> = {}
  ): void {
    const attempt = this.createAttemptFromResult(gameId, gameMode, result, answers, questionTimes);
    progressManager.saveMiniGameAttempt(attempt);
  }
  
  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Å‡∏°
  static getGameStats() {
    return progressManager.getMiniGameStats();
  }
  
  // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  static getCompletedGamesCount(): number {
    const stats = progressManager.getMiniGameStats();
    if (!stats) return 0;
    
    const uniqueGameModes = new Set(stats.attempts.map(a => a.gameMode));
    return uniqueGameModes.size;
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
  static getTotalScore(): number {
    const stats = progressManager.getMiniGameStats();
    return stats?.totalScore || 0;
  }
  
  // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô
  static getStreakDays(): number {
    const progress = progressManager.getProgress();
    return progress.currentStreak || 0;
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  static hasCompleted(gameMode: string): boolean {
    return progressManager.hasPlayedGameMode(gameMode);
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
  static getBestScore(gameMode: string): number {
    const stats = progressManager.getMiniGameStats();
    if (!stats) return 0;
    
    switch (gameMode) {
      case 'score-challenge':
        return stats.scoreChallengeBest;
      case 'time-rush':
        return stats.timeRushBest;
      case 'random-quiz':
        return stats.randomQuizBest;
      default:
        return 0;
    }
  }
  
  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
  static getGameHistory(gameMode?: string): MiniGameAttempt[] {
    return progressManager.getMiniGameHistory(gameMode);
  }
  
  // ‡∏î‡∏∂‡∏á achievements ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
  static getUnlockedAchievements(): string[] {
    const stats = progressManager.getMiniGameStats();
    return stats?.achievements || [];
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
  static getProgressPercentage(): number {
    const totalModes = 3; // score-challenge, time-rush, random-quiz
    const completedModes = this.getCompletedGamesCount();
    return Math.round((completedModes / totalModes) * 100);
  }
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á achievement
  static getAchievementData() {
    const unlockedAchievements = this.getUnlockedAchievements();
    const stats = progressManager.getMiniGameStats();
    
    return [
      {
        id: "first-game",
        name: "‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
        description: "‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å",
        icon: "üéÆ",
        unlocked: unlockedAchievements.includes('first-game'),
        reward: "+50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      },
      {
        id: "score-master",
        name: "‡∏õ‡∏£‡∏°‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
        description: "‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô Score Challenge",
        icon: "üèÜ",
        unlocked: unlockedAchievements.includes('score-master'),
        reward: "+200 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      },
      {
        id: "speed-demon",
        name: "‡∏õ‡∏µ‡∏®‡∏≤‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß",
        description: "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å 20 ‡∏Ç‡πâ‡∏≠‡πÉ‡∏ô Time Rush",
        icon: "‚ö°",
        unlocked: unlockedAchievements.includes('speed-demon'),
        reward: "+300 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      },
      {
        id: "knowledge-expert",
        name: "‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ",
        description: "‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 80%+",
        icon: "üß†",
        unlocked: unlockedAchievements.includes('knowledge-expert'),
        reward: "+500 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      },
      {
        id: "perfect-score",
        name: "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö",
        description: "‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 100% ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á",
        icon: "‚≠ê",
        unlocked: unlockedAchievements.includes('perfect-score'),
        reward: "+250 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      },
      {
        id: "quiz-champion",
        name: "‡πÅ‡∏ä‡∏°‡∏õ‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        description: "‡∏Ñ‡∏£‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡πÉ‡∏ô‡∏•‡∏µ‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î",
        icon: "üëë",
        unlocked: false, // This would need leaderboard integration
        reward: "+1000 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô",
      }
    ];
  }
  
  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
  static getInterestingStats() {
    const stats = progressManager.getMiniGameStats();
    const progress = progressManager.getProgress();
    
    if (!stats) {
      return {
        totalPlays: 0,
        averageTime: 0,
        bestScore: 0,
        accuracy: 0
      };
    }
    
    const accuracy = stats.gamesPlayed > 0 
      ? Math.round(stats.attempts.reduce((sum, a) => sum + a.percentage, 0) / stats.gamesPlayed)
      : 0;
    
    return {
      totalPlays: stats.gamesPlayed,
      averageTime: stats.gamesPlayed > 0 ? Math.round(stats.totalTimeSpent / stats.gamesPlayed) : 0,
      bestScore: stats.bestScore,
      accuracy
    };
  }
}
