// ‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API
import { userService } from './api/services/userService';
import type { CreateUserRequest } from './api/types';

export interface User {
  id: string;
  name: string;
  email: string;
  createdAt: Date;
}

export interface SignUpData {
  name: string;
  email: string;
  password: string;
}

export interface LoginData {
  email: string;
  password: string;
}

class AuthManager {
  private currentUser: User | null = null;
  private authKey = 'astronomy_app_user';
  private tokenKey = 'astronomy_app_token';
  private tokenExpiryKey = 'astronomy_app_token_expiry';
  private checkTokenInterval: NodeJS.Timeout | null = null;
  private lastActivityKey = 'astronomy_app_last_activity';
  private authStateListeners: ((user: User | null) => void)[] = [];

  constructor() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if (typeof window !== 'undefined') {
      const savedUser = localStorage.getItem(this.authKey);
      if (savedUser) {
        this.currentUser = JSON.parse(savedUser);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token expiry ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      this.checkTokenExpiry();
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
      this.startTokenMonitoring();
      
      // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° user activity
      this.initializeActivityTracking();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token expiry ‡πÄ‡∏°‡∏∑‡πà‡∏≠ page visible again (‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á)
      document.addEventListener('visibilitychange', () => {
        if (!document.hidden && this.isLoggedIn()) {
          this.checkTokenExpiry();
        }
      });
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
  isLoggedIn(): boolean {
    return this.currentUser !== null && !this.isTokenExpired();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  private isTokenExpired(): boolean {
    if (typeof window === 'undefined') return false;
    
    const expiry = localStorage.getItem(this.tokenExpiryKey);
    if (!expiry) return false;
    
    const expiryTime = new Date(expiry).getTime();
    const currentTime = Date.now();
    
    return currentTime >= expiryTime;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ token expiry
  private checkTokenExpiry(): void {
    if (this.isTokenExpired() && this.currentUser) {
      console.log('üîí Token expired, logging out...');
      this.forceLogout();
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
  private startTokenMonitoring(): void {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å ‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    this.checkTokenInterval = setInterval(() => {
      this.checkTokenExpiry();
    }, 5 * 60 * 1000); // 5 minutes
  }

  // ‡∏´‡∏¢‡∏∏‡∏î token monitoring
  private stopTokenMonitoring(): void {
    if (this.checkTokenInterval) {
      clearInterval(this.checkTokenInterval);
      this.checkTokenInterval = null;
    }
  }

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° user activity
  private initializeActivityTracking(): void {
    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    
    const updateActivity = () => {
      if (this.isLoggedIn()) {
        localStorage.setItem(this.lastActivityKey, Date.now().toString());
      }
    };

    events.forEach(event => {
      document.addEventListener(event, updateActivity, true);
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å activity ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    updateActivity();
  }

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö logout ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
  private forceLogout(): void {
    this.currentUser = null;
    this.stopTokenMonitoring();
    
    if (typeof window !== 'undefined') {
      localStorage.removeItem(this.authKey);
      localStorage.removeItem(this.tokenKey);
      localStorage.removeItem(this.tokenExpiryKey);
      localStorage.removeItem(this.lastActivityKey);
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ progress cleanup
    this.handleLogoutActions();
    
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô listeners
    this.notifyAuthStateChange();
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    if (typeof window !== 'undefined') {
      window.location.href = '/';
    }
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô auth state listeners
  private notifyAuthStateChange(): void {
    this.authStateListeners.forEach(listener => {
      try {
        listener(this.currentUser);
      } catch (error) {
        console.error('Error in auth state listener:', error);
      }
    });
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getCurrentUser(): User | null {
    return this.currentUser;
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - ‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á
  async signUp(signUpData: SignUpData): Promise<{ success: boolean; message: string; user?: User }> {
    try {
      const { name, email, password } = signUpData;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      if (!name.trim() || !email.trim() || !password.trim()) {
        return { success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' };
      }

      if (password.length < 6) {
        return { success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' };
      }

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const createUserData: CreateUserRequest = {
        name: name.trim(),
        email: email.trim(),
        password
      };

      console.log('Sending create user request:', createUserData);
      const response = await userService.createUser(createUserData);
      
      // Handle actual API response format
      console.log('API Response:', response);
      
      let userData;
      let token;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response format ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      if (response && (response as any).user) {
        // Format: { user: User, token?: string, message?: string }
        userData = (response as any).user;
        token = (response as any).token;
      } else if (response && response.data && (response.data as any).user) {
        // Format: { data: { user: User, token?: string } }
        userData = (response.data as any).user;
        token = (response.data as any).token;
      } else if (response && response.data) {
        // Format: { data: User }
        userData = response.data;
      } else if (response && (response as any).id) {
        // Format: User object directly
        userData = response;
      } else {
        console.error('Unexpected API response format:', response);
        return { 
          success: false, 
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
        };
      }

      if (!userData || !userData.id) {
        return { 
          success: false, 
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
        };
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô User interface ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
      const user: User = {
        id: userData.id || userData._id,
        name: userData.name || userData.fullName || userData.displayName,
        email: userData.email,
        createdAt: new Date(userData.createAt || userData.createdAt || userData.created_at || Date.now())
      };

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á localStorage
          this.currentUser = user;
          if (typeof window !== 'undefined') {
            localStorage.setItem(this.authKey, JSON.stringify(user));
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
            if (token) {
              localStorage.setItem(this.tokenKey, token);
              
              // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ (1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
              const expiryTime = new Date(Date.now() + 60 * 60 * 1000); // 60 minutes
              localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
            }

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
            this.startTokenMonitoring();        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        const savedUsers = localStorage.getItem('astronomy_app_all_users');
        let allUsers = [];
        if (savedUsers) {
          try {
            allUsers = JSON.parse(savedUsers);
          } catch (e) {
            allUsers = [];
          }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏° password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login)
        const userWithPassword = {
          ...user,
          password: password, // ‡πÄ‡∏Å‡πá‡∏ö password ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login
          createdAt: user.createdAt.toISOString()
        };
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
        const existingUserIndex = allUsers.findIndex((u: any) => u.email === user.email);
        if (existingUserIndex >= 0) {
          allUsers[existingUserIndex] = userWithPassword;
        } else {
          allUsers.push(userWithPassword);
        }
        
        localStorage.setItem('astronomy_app_all_users', JSON.stringify(allUsers));
        console.log('User saved to localStorage backup:', userWithPassword);
      }

      console.log('Sign up successful, user:', user);
      return { 
        success: true, 
        message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
        user 
      };

    } catch (error: any) {
      console.error('SignUp error:', error);
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error messages ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
      if (error.status === 409 || error.message?.includes('already exists') || error.message?.includes('duplicate')) {
        return { success: false, message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' };
      } else if (error.status === 400) {
        return { success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' };
      } else if (error.message?.includes('fetch') || error.message?.includes('Network')) {
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï' };
      } else if (error.message?.includes('JSON')) {
        return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' };
      }
      
      return { 
        success: false, 
        message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
      };
    }
  }

  // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô - ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
  async login(loginData: LoginData): Promise<{ success: boolean; message: string; user?: User }> {
    try {
      const { email, password } = loginData;
      
      if (!email.trim() || !password.trim()) {
        return { success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' };
      }

      console.log('Attempting login with email:', email.trim());
      
      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏≠‡∏á login endpoint ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
      try {
        console.log('Trying login endpoint with correct route...');
        const response = await userService.loginUser(email.trim(), password);
        console.log('Login API response:', response);
        
        let userData;
        let token;

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á response
        if (response && (response as any).user) {
          // Format: { user: User, token?: string }
          userData = (response as any).user;
          token = (response as any).token;
          console.log('Found user data in response.user');
        } else if (response && response.data && (response.data as any).user) {
          // Format: { data: { user: User, token?: string } }
          userData = (response.data as any).user;
          token = (response.data as any).token;
          console.log('Found user data in response.data.user');
        } else if (response && response.data) {
          // Format: { data: User } (user data directly in data)
          userData = response.data;
          token = (response as any).token; // token might be at root level
          console.log('Found user data in response.data');
        } else if (response && (response as any).id) {
          // Format: User object directly (no wrapper)
          userData = response;
          console.log('Found user data directly in response');
        }

        if (userData && (userData.id || userData._id)) {
          console.log('Processing user data:', userData);
          
          const user: User = {
            id: userData.id || userData._id,
            name: userData.name || userData.fullName || userData.displayName,
            email: userData.email,
            createdAt: new Date(userData.createAt || userData.createdAt || userData.created_at || Date.now())
          };

            this.currentUser = user;
            if (typeof window !== 'undefined') {
              localStorage.setItem(this.authKey, JSON.stringify(user));
              if (token) {
                localStorage.setItem(this.tokenKey, token);
                
                // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ
                const expiryTime = new Date(Date.now() + 60 * 60 * 1000);
                localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
              }
              
              // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
              this.startTokenMonitoring();
            }
            
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ progress migration ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            this.handlePostLoginActions();
            
            console.log('Login successful via login endpoint, user:', user);
          return { success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user };
        } else {
          console.log('No valid user data found in response');
        }
      } catch (loginError: any) {
        console.log('Login endpoint failed:', loginError.message);
        console.log('Login error details:', loginError);
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ public user list
      try {
        console.log('Trying public user list...');
        const response = await userService.getAllUsersPublic();
        console.log('Public users response:', response);
        
        let users = [];
        if (response && (response as any).user) {
          users = (response as any).user;
        } else if (response && response.data) {
          users = response.data;
        }

        if (Array.isArray(users) && users.length > 0) {
          const foundUser = users.find((user: any) => {
            console.log('Checking user:', user.email, 'vs', email.trim());
            return user.email === email.trim() && user.password === password;
          });

          if (foundUser) {
            const user: User = {
              id: foundUser.id || foundUser._id,
              name: foundUser.name || foundUser.fullName || foundUser.displayName,
              email: foundUser.email,
              createdAt: new Date(foundUser.createAt || foundUser.createdAt || foundUser.created_at || Date.now())
            };

            this.currentUser = user;
            if (typeof window !== 'undefined') {
              localStorage.setItem(this.authKey, JSON.stringify(user));
              
              // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö public user list login)
              const expiryTime = new Date(Date.now() + 60 * 60 * 1000);
              localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
              
              // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
              this.startTokenMonitoring();
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ progress migration ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            this.handlePostLoginActions();

            console.log('Login successful via public user list, user:', user);
            return { success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user };
          }
        }
      } catch (publicError: any) {
        console.log('Public user list failed:', publicError.message);
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ user list ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ auth)
      try {
        console.log('Trying regular user list...');
        const response = await userService.getAllUsers();
        console.log('Regular users response:', response);
        
        let users = [];
        if (response && (response as any).user) {
          users = (response as any).user;
        } else if (response && response.data) {
          users = response.data;
        }

        if (Array.isArray(users) && users.length > 0) {
          const foundUser = users.find((user: any) => {
            return user.email === email.trim() && user.password === password;
          });

          if (foundUser) {
            const user: User = {
              id: foundUser.id || foundUser._id,
              name: foundUser.name || foundUser.fullName || foundUser.displayName,
              email: foundUser.email,
              createdAt: new Date(foundUser.createAt || foundUser.createdAt || foundUser.created_at || Date.now())
            };

            this.currentUser = user;
            if (typeof window !== 'undefined') {
              localStorage.setItem(this.authKey, JSON.stringify(user));
              
              // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö regular user list login)
              const expiryTime = new Date(Date.now() + 60 * 60 * 1000);
              localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
              
              // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
              this.startTokenMonitoring();
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ progress migration ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            this.handlePostLoginActions();

            console.log('Login successful via regular user list, user:', user);
            return { success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', user };
          }
        }
      } catch (regularError: any) {
        console.log('Regular user list failed:', regularError.message);
      }

      // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å localStorage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
      console.log('Trying localStorage fallback...');
      if (typeof window !== 'undefined') {
        // ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const savedUsers = localStorage.getItem('astronomy_app_all_users');
        if (savedUsers) {
          try {
            const users = JSON.parse(savedUsers);
            const foundUser = users.find((user: any) => 
              user.email === email.trim() && user.password === password
            );

            if (foundUser) {
              const user: User = {
                id: foundUser.id,
                name: foundUser.name,
                email: foundUser.email,
                createdAt: new Date(foundUser.createdAt || Date.now())
              };

              this.currentUser = user;
              localStorage.setItem(this.authKey, JSON.stringify(user));
              
              // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localStorage fallback)
              const expiryTime = new Date(Date.now() + 60 * 60 * 1000);
              localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
              
              // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô token monitoring
              this.startTokenMonitoring();

              // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ progress migration ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              this.handlePostLoginActions();

              console.log('Login successful via localStorage fallback, user:', user);
              return { success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)', user };
            }
          } catch (parseError) {
            console.error('Error parsing saved users:', parseError);
          }
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢
      console.log('User not found with any method');
      return { success: false, message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };

    } catch (error: any) {
      console.error('Login error:', error);
      
      if (error.status === 401 || error.message?.includes('Unauthorized')) {
        return { success: false, message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
      } else if (error.status === 404) {
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' };
      } else if (error.status === 400) {
        return { success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
      } else if (error.message?.includes('fetch') || error.message?.includes('Network')) {
        return { success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï' };
      }
      
      return { 
        success: false, 
        message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' 
      };
    }
  }

  // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå
  async logout(): Promise<void> {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API logout (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token)
      const token = typeof window !== 'undefined' ? localStorage.getItem(this.tokenKey) : null;
      if (token) {
        await userService.logoutUser();
      }
    } catch (error) {
      console.error('Logout API error:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á client
    } finally {
      // ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á client
      this.currentUser = null;
      this.stopTokenMonitoring();
      
      if (typeof window !== 'undefined') {
        localStorage.removeItem(this.authKey);
        localStorage.removeItem(this.tokenKey);
        localStorage.removeItem(this.tokenExpiryKey);
        localStorage.removeItem(this.lastActivityKey);
      }
      
      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ progress cleanup
      this.handleLogoutActions();
      
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô listeners
      this.notifyAuthStateChange();
    }
  }

  // ‡∏î‡∏∂‡∏á authentication token
  getToken(): string | null {
    if (typeof window === 'undefined') return null;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (this.isTokenExpired()) {
      return null;
    }
    
    return localStorage.getItem(this.tokenKey);
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isTokenValid(): boolean {
    return this.getToken() !== null && !this.isTokenExpired();
  }

  // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token expiry (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ activity ‡πÉ‡∏´‡∏°‡πà)
  refreshTokenExpiry(): void {
    if (this.isLoggedIn() && typeof window !== 'undefined') {
      const expiryTime = new Date(Date.now() + 60 * 60 * 1000); // 60 minutes
      localStorage.setItem(this.tokenExpiryKey, expiryTime.toISOString());
      console.log('üîÑ Token expiry refreshed to:', expiryTime.toISOString());
    }
  }

  // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á token
  getTokenExpiry(): Date | null {
    if (typeof window === 'undefined') return null;
    
    const expiry = localStorage.getItem(this.tokenExpiryKey);
    return expiry ? new Date(expiry) : null;
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ auth ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  onAuthStateChange(callback: (user: User | null) => void): () => void {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
    this.authStateListeners.push(callback);
    
    // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    callback(this.currentUser);
    
    // Return unsubscribe function
    return () => {
      const index = this.authStateListeners.indexOf(callback);
      if (index > -1) {
        this.authStateListeners.splice(index, 1);
      }
    };
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ actions ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  private async handlePostLoginActions(): Promise<void> {
    try {
      // Import ProgressManager dynamically ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô circular dependency
      const { progressManager } = await import('./progress');
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ comprehensive login sync
      await progressManager.handleLoginSync();
      
      console.log('‚úÖ Post-login actions completed successfully');
    } catch (error) {
      console.error('‚ùå Error in post-login actions:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ login fail
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ actions ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å logout
  handleLogoutActions(): void {
    try {
      // Import ProgressManager dynamically
      import('./progress').then(({ progressManager }) => {
        progressManager.handleLogoutCleanup();
      });
      
      console.log('‚úÖ Post-logout actions completed successfully');
    } catch (error) {
      console.error('‚ùå Error in post-logout actions:', error);
    }
  }
}

export const authManager = new AuthManager();
