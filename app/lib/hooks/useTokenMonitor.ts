import { useEffect, useRef, useCallback } from 'react';
import { authManager } from '../auth';

/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token expiration ‡πÅ‡∏•‡∏∞ auto logout
 */
export function useTokenMonitor() {
  const activityTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const warningShownRef = useRef(false);

  // ‡πÉ‡∏ä‡πâ useCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô function recreate ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const getTimeUntilExpiry = useCallback((): number | null => {
    const expiry = authManager.getTokenExpiry();
    if (!expiry) return null;
    return Math.max(0, expiry.getTime() - Date.now());
  }, []);

  const isTokenValid = useCallback((): boolean => {
    return authManager.isTokenValid();
  }, []);

  const refreshToken = useCallback(() => {
    authManager.refreshTokenExpiry();
  }, []);

  useEffect(() => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hook mount
    if (authManager.isLoggedIn() && !authManager.isTokenValid()) {
      console.log('üîí Invalid token detected on mount, logging out...');
      authManager.logout();
      return;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á warning ‡∏Å‡πà‡∏≠‡∏ô token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const showExpiryWarning = () => {
      if (warningShownRef.current) return;
      
      const timeRemaining = getTimeUntilExpiry();
      if (timeRemaining && timeRemaining <= 5 * 60 * 1000) { // 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        warningShownRef.current = true;
        
        // ‡πÅ‡∏™‡∏î‡∏á toast warning (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ toast system)
        console.warn('‚ö†Ô∏è Session will expire in 5 minutes');
        
        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ)
        if (typeof window !== 'undefined' && 'Notification' in window) {
          if (Notification.permission === 'granted') {
            new Notification('Session Expiring', {
              body: 'Your session will expire in 5 minutes. Please save your work.',
              icon: '/favicon.ico'
            });
          }
        }
      }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token expiry ‡πÅ‡∏ö‡∏ö periodic
    const checkTokenExpiry = () => {
      if (!authManager.isLoggedIn()) return;

      const timeRemaining = getTimeUntilExpiry();
      
      if (timeRemaining === null) {
        console.log('üîí No token expiry found, logging out...');
        authManager.logout();
        return;
      }

      if (timeRemaining <= 0) {
        console.log('üîí Token expired, logging out...');
        authManager.logout();
        return;
      }

      // ‡πÅ‡∏™‡∏î‡∏á warning ‡∏ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      showExpiryWarning();
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å ‡πÜ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const tokenCheckInterval = setInterval(checkTokenExpiry, 30 * 1000);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÄ‡∏°‡∏∑‡πà‡∏≠ page visible again
    const handleVisibilityChange = () => {
      if (!document.hidden && authManager.isLoggedIn()) {
        checkTokenExpiry();
        warningShownRef.current = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï warning flag
      }
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤
    const handleFocus = () => {
      if (authManager.isLoggedIn()) {
        checkTokenExpiry();
        warningShownRef.current = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï warning flag
      }
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners
    document.addEventListener('visibilitychange', handleVisibilityChange);
    window.addEventListener('focus', handleFocus);

    // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° user activity ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh token (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    
    const handleUserActivity = () => {
      if (!authManager.isLoggedIn()) return;

      // Clear previous timeout
      if (activityTimeoutRef.current) {
        clearTimeout(activityTimeoutRef.current);
      }

      // Set new timeout for inactivity logout (optional - ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ auto logout ‡∏à‡∏≤‡∏Å inactivity)
      // activityTimeoutRef.current = setTimeout(() => {
      //   console.log('üîí Auto logout due to inactivity');
      //   authManager.logout();
      // }, 30 * 60 * 1000); // 30 minutes of inactivity
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° activity listeners
    activityEvents.forEach(event => {
      document.addEventListener(event, handleUserActivity, true);
    });

    // Cleanup
    return () => {
      clearInterval(tokenCheckInterval);
      
      if (activityTimeoutRef.current) {
        clearTimeout(activityTimeoutRef.current);
      }

      document.removeEventListener('visibilitychange', handleVisibilityChange);
      window.removeEventListener('focus', handleFocus);
      
      activityEvents.forEach(event => {
        document.removeEventListener(event, handleUserActivity, true);
      });
    };
  }, []); // ‡∏•‡∏ö dependencies ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô infinite loop

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
  return {
    getTimeUntilExpiry,
    isTokenValid,
    refreshToken
  };
}