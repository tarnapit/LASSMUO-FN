"use client";
import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import { Star, Clock, Trophy, X, ArrowLeft, Sparkles, Target, Award, Rocket, Play, BookOpen, Zap } from "lucide-react";
import Navbar from "../../components/layout/Navbar";
import { progressManager } from "../../lib/progress";
import { Question } from "../../types/stage";
import EnhancedQuizComponent from "../../components/quiz/QuizComponent";
import QuizLoadingScreen from "../../components/quiz/QuizLoadingScreen";
import EnhancedResultsComponent from "../../components/quiz/ResultsComponent";
import { useStageById } from "../../lib/hooks/useStageData";
import { useStageProgressManager } from "../../lib/hooks/useStageProgressManager";
import { authManager } from "../../lib/auth";
import { addImagesToQuestions } from "../../lib/image-mapper";
import "../../styles/stage-presentation.css";

// Character Introduction Component
const CharacterIntro = ({ 
  stage, 
  character,
  onContinue,
  currentUser,
  stageId 
}: { 
  stage: any;
  character?: any;
  onContinue: () => void;
  currentUser?: any;
  stageId: number;
}) => {
  const [animationClass, setAnimationClass] = useState("opacity-0 translate-y-10");

  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimationClass("opacity-100 translate-y-0");
    }, 200);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex flex-col overflow-hidden relative">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -left-40 w-80 h-80 bg-blue-500/20 rounded-full blur-xl animate-pulse"></div>
        <div className="absolute top-1/3 -right-32 w-96 h-96 bg-purple-500/20 rounded-full blur-xl animate-pulse delay-1000"></div>
        <div className="absolute -bottom-32 left-1/3 w-64 h-64 bg-pink-500/20 rounded-full blur-xl animate-pulse delay-2000"></div>
        
        {/* Floating stars */}
        {[...Array(20)].map((_, i) => (
          <div
            key={i}
            className={`absolute text-yellow-300 floating-star`}
          >
            ‚ú®
          </div>
        ))}
      </div>

      <Navbar />
      <div className={`flex-1 flex flex-col items-center justify-center px-8 transition-all duration-1000 ease-out ${animationClass}`}>
        <div className="text-center space-y-8 max-w-4xl relative z-10">
          {/* Character Avatar with Animation */}
          <div className="relative">
            <div className="text-9xl mb-6 animate-bounce filter drop-shadow-2xl">
              {character?.avatar || "üöÄ"}
            </div>
            <div className="absolute -top-4 -right-4">
              <Sparkles className="w-8 h-8 text-yellow-300 animate-spin" />
            </div>
          </div>
          
          {/* Stage Title with Glow Effect */}
          <div className="relative">
            <h1 className="gradient-text text-5xl md:text-6xl font-bold mb-4 drop-shadow-lg">
              {stage.title}
            </h1>
          </div>
          
          {/* Character Name & Progress */}
          <div className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-bold text-white flex items-center justify-center gap-2 mb-4">
              <Rocket className="w-6 h-6 text-blue-400" />
              ‡∏û‡∏ö‡∏Å‡∏±‡∏ö {character?.name || "‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á"}
              <Rocket className="w-6 h-6 text-purple-400 scale-x-[-1]" />
            </h2>
            
            {/* User Progress Summary */}
            {currentUser && (
              <div className="flex justify-center gap-6 text-sm">
                <div className="flex items-center gap-2">
                  <Trophy className="w-4 h-4 text-yellow-400" />
                  <span className="text-gray-300">‡∏£‡∏∞‡∏î‡∏±‡∏ö {currentUser.level}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Star className="w-4 h-4 text-blue-400" />
                  <span className="text-gray-300">{currentUser.experience} XP</span>
                </div>
                <div className="flex items-center gap-2">
                  <Award className="w-4 h-4 text-purple-400" />
                  <span className="text-gray-300">‡∏î‡πà‡∏≤‡∏ô {stageId}</span>
                </div>
              </div>
            )}
          </div>
          
          {/* Character Introduction with Enhanced Design */}
          <div className="bg-gradient-to-br from-white/10 via-white/5 to-transparent backdrop-blur-md rounded-2xl p-8 shadow-2xl border border-white/20 relative overflow-hidden">
            <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400"></div>
            <div className="flex items-start gap-4">
              <div className="text-4xl">{character?.avatar || "üöÄ"}</div>
              <div className="flex-1">
                <p className="text-white text-lg leading-relaxed text-left">
                  {character?.introduction || `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà ${stage.title}! ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡∏≤‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå`}
                </p>
              </div>
            </div>
          </div>

          {/* Enhanced Stage Info Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="interactive-card stagger-animation info-card bg-gradient-to-br from-emerald-500/20 to-teal-500/20 backdrop-blur-sm rounded-xl p-6 border border-emerald-400/30">
              <div className="flex items-center justify-center mb-3">
                <Target className="w-8 h-8 text-emerald-400 bounce-icon" />
              </div>
              <p className="text-emerald-300 text-sm mb-1">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å</p>
              <p className="text-white font-bold text-lg">
                {stage.difficulty === 'Easy' ? 'üü¢ ‡∏á‡πà‡∏≤‡∏¢' :
                 stage.difficulty === 'Medium' ? 'üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : 'üî¥ ‡∏¢‡∏≤‡∏Å'}
              </p>
            </div>
            
            <div className="interactive-card stagger-animation info-card bg-gradient-to-br from-blue-500/20 to-cyan-500/20 backdrop-blur-sm rounded-xl p-6 border border-blue-400/30">
              <div className="flex items-center justify-center mb-3">
                <Clock className="w-8 h-8 text-blue-400 bounce-icon" />
              </div>
              <p className="text-blue-300 text-sm mb-1">‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</p>
              <p className="text-white font-bold text-lg">‚è±Ô∏è {stage.estimatedTime || '5-10 ‡∏ô‡∏≤‡∏ó‡∏µ'}</p>
            </div>
            
            <div className="interactive-card stagger-animation info-card bg-gradient-to-br from-yellow-500/20 to-orange-500/20 backdrop-blur-sm rounded-xl p-6 border border-yellow-400/30 glow-border">
              <div className="flex items-center justify-center mb-3">
                <Award className="w-8 h-8 text-yellow-400 achievement-badge" />
              </div>
              <p className="text-yellow-300 text-sm mb-1">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• XP</p>
              <p className="text-white font-bold text-lg">üíé {stage.xpReward || 100} XP</p>
            </div>
          </div>

          {/* Enhanced Continue Button */}
          <div className="pt-4">
            <button
              onClick={onContinue}
              className="button-glow group relative bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 hover:from-cyan-400 hover:via-blue-400 hover:to-purple-400 text-white px-12 py-4 rounded-2xl text-xl font-bold transition-all duration-300 transform hover:scale-105 shadow-2xl hover:shadow-cyan-500/25 border border-white/20"
            >
              <div className="flex items-center gap-3">
                <Play className="w-6 h-6 group-hover:scale-110 transition-transform" />
                <span>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</span>
                <Zap className="w-6 h-6 group-hover:scale-110 transition-transform" />
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Learning Content Component
const LearningContent = ({ 
  stage, 
  character,
  onStartQuiz,
  questions 
}: { 
  stage: any;
  character?: any;
  onStartQuiz: () => void;
  questions: Question[];
}) => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setIsVisible(true), 300);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex flex-col relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
        <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
        
        {/* Grid Pattern */}
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent"></div>
        <div className="absolute inset-0 opacity-10 grid-pattern"></div>
      </div>

      <Navbar />
      <div className={`flex-1 container mx-auto px-8 py-16 max-w-7xl relative z-10 transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
        {/* Enhanced Header */}
        <div className="text-center mb-16 relative">
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-32 h-32 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-2xl"></div>
          </div>
          <div className="relative">
            <h1 className="gradient-text text-5xl md:text-6xl font-bold mb-6 drop-shadow-lg">
              {stage.title}
            </h1>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
              {stage.description}
            </p>
          </div>
        </div>

        {/* Enhanced Learning Content Grid */}
        <div className="grid lg:grid-cols-2 gap-12 mb-16">
          {/* Enhanced Character Section */}
          <div className="group relative">
            <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-2xl blur-xl group-hover:blur-2xl transition-all"></div>
            <div className="relative info-card hover-lift bg-gradient-to-br from-white/10 via-white/5 to-transparent backdrop-blur-xl rounded-2xl p-8 border border-white/20 shadow-2xl">
              
              <div className="flex items-start space-x-6">
                <div className="status-indicator relative">
                  <div className="text-7xl filter drop-shadow-lg custom-pulse">
                    {character?.avatar || "üöÄ"}
                  </div>
                </div>
                
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-4">
                    <BookOpen className="w-6 h-6 text-blue-400" />
                    <h3 className="text-2xl font-bold text-white">
                      {character?.name || "‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á"} ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤:
                    </h3>
                  </div>
                  
                  <div className="bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-xl p-4 border border-blue-400/30">
                    <p className="text-white text-lg leading-relaxed">
                      {character?.learningContent || `‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô ${stage.title} ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô!`}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Enhanced Visual Content */}
          <div className="group relative">
            <div className="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-2xl blur-xl group-hover:blur-2xl transition-all"></div>
            <div className="relative info-card hover-lift bg-gradient-to-br from-white/10 via-white/5 to-transparent backdrop-blur-xl rounded-2xl p-8 border border-white/20 shadow-2xl text-center">
              
              {/* Enhanced Visual Element */}
              <div className="relative mb-6">
                <div className="text-8xl mb-4 filter drop-shadow-2xl custom-pulse">
                  {stage.thumbnail || "üåå"}
                </div>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="w-24 h-24 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full blur-xl animate-pulse"></div>
                </div>
              </div>
              
              <h3 className="text-2xl font-bold text-white mb-4 flex items-center justify-center gap-2">
                <Sparkles className="w-6 h-6 text-purple-400" />
                ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
                <Sparkles className="w-6 h-6 text-pink-400" />
              </h3>
              
              <div className="bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-xl p-6 border border-purple-400/30">
                <p className="text-gray-300 text-lg leading-relaxed">
                  ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö <span className="text-white font-semibold">{stage.title}</span> 
                  ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢! üöÄ
                </p>
              </div>

              {/* Learning Features */}
              <div className="mt-6 grid grid-cols-2 gap-4">
                <div className="info-card bg-white/5 rounded-lg p-3 border border-purple-400/20 hover-lift">
                  <Trophy className="w-6 h-6 text-yellow-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-300">‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</p>
                  <p className="text-xs text-yellow-300">{stage.xpReward || 100} XP</p>
                </div>
                <div className="info-card bg-white/5 rounded-lg p-3 border border-purple-400/20 hover-lift">
                  <Star className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-300">‡πÑ‡∏î‡πâ‡∏î‡∏≤‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</p>
                  <p className="text-xs text-blue-300">{stage.maxStars || 3} ‡∏î‡∏≤‡∏ß</p>
                </div>
              </div>

              {/* Special Achievements */}
              <div className="mt-4 p-3 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-lg border border-yellow-400/30">
                <div className="flex items-center justify-center gap-2 mb-2">
                  <Award className="w-5 h-5 text-yellow-400" />
                  <span className="text-yellow-300 text-sm font-semibold">‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©</span>
                </div>
                <p className="text-xs text-gray-300 text-center">
                  ‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©! ‚ú®
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Action Section */}
        <div className="text-center relative">
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-64 h-64 bg-gradient-to-r from-green-500/10 to-blue-500/10 rounded-full blur-3xl animate-pulse"></div>
          </div>
          
          <div className="relative">
            <div className="mb-6">
              <p className="text-gray-300 text-lg mb-2">üéØ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?</p>
              <p className="text-sm text-gray-400">‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏µ {stage.totalQuestions || '‡∏´‡∏•‡∏≤‡∏¢'} ‡∏Ç‡πâ‡∏≠ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {stage.estimatedTime || '5-10 ‡∏ô‡∏≤‡∏ó‡∏µ'}</p>
            </div>
            
            <button
              onClick={onStartQuiz}
              className="button-glow group relative bg-gradient-to-r from-green-500 via-blue-500 to-purple-500 hover:from-green-400 hover:via-blue-400 hover:to-purple-400 text-white px-12 py-5 rounded-2xl text-xl font-bold transition-all duration-300 transform hover:scale-105 shadow-2xl hover:shadow-green-500/25 border border-white/20"
            >
              <div className="flex items-center gap-3">
                <Target className="w-7 h-7 group-hover:scale-110 transition-transform" />
                <span>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</span>
                <Zap className="w-7 h-7 group-hover:scale-110 transition-transform" />
              </div>
            </button>
            
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
              <div className="bg-white/5 rounded-lg p-4 border border-gray-500/30">
                <Clock className="w-6 h-6 text-blue-400 mx-auto mb-2" />
                <p className="text-xs text-gray-400 mb-1">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</p>
                <p className="text-sm text-white font-semibold">‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î</p>
              </div>
              <div className="bg-white/5 rounded-lg p-4 border border-gray-500/30">
                <Target className="w-6 h-6 text-green-400 mx-auto mb-2" />
                <p className="text-xs text-gray-400 mb-1">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠</p>
                <p className="text-sm text-white font-semibold">{questions.length || '5'} ‡∏Ç‡πâ‡∏≠</p>
              </div>
              <div className="bg-white/5 rounded-lg p-4 border border-gray-500/30">
                <Trophy className="w-6 h-6 text-yellow-400 mx-auto mb-2" />
                <p className="text-xs text-gray-400 mb-1">‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• XP</p>
                <p className="text-sm text-white font-semibold">{stage.xpReward || 100} XP</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default function StageDetailPage() {
  const params = useParams();
  const router = useRouter();
  const stageId = parseInt(params.level as string);
  
  // States
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [gameState, setGameState] = useState<'intro' | 'learning' | 'loading' | 'quiz' | 'results'>('intro');
  const [quizResults, setQuizResults] = useState<any>(null);
  const [questions, setQuestions] = useState<Question[]>([]);

  // API Hooks
  const { stage, loading: stageLoading, error: stageError } = useStageById(stageId);
  const { 
    progress: stageProgress, 
    recordAttempt, 
    completeStage,
    refreshProgress 
  } = useStageProgressManager(currentUser?.id);

  // Initialize user
  useEffect(() => {
    const user = authManager.getCurrentUser() || {
      id: 1,
      name: "‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
      level: 1,
      experience: 150,
      avatar: "üë©‚ÄçüöÄ",
    };
    setCurrentUser(user);
  }, []);

  // Load questions based on stage
  useEffect(() => {
    if (stage) {
      console.log('üéØ Loading questions for stage:', stageId, stage);
      
      // Check if stage has questions (from API)
      const stageAny = stage as any;
      if (stageAny.questions && Array.isArray(stageAny.questions)) {
        console.log('üìù Using questions from API:', stageAny.questions);
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û mock ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å API
        const questionsWithImages = addImagesToQuestions(stageAny.questions, stageId);
        console.log('üñºÔ∏è Questions with mock images:', questionsWithImages);
        setQuestions(questionsWithImages);
        return;
      }
      
      // Fallback: Load questions from mock data
      try {
        const { stages } = require('../../data/stages');
        const stageInfo = stages[stageId];
        console.log('üìã Available stages in mock data:', Object.keys(stages));
        console.log('üìã Stage info for', stageId, ':', stageInfo);
        
        if (stageInfo?.questions) {
          console.log('üìù Using questions from mock data:', stageInfo.questions);
          // Mock data ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à
          const questionsWithImages = addImagesToQuestions(stageInfo.questions, stageId);
          setQuestions(questionsWithImages);
        } else {
          console.warn('‚ö†Ô∏è No questions found for stage:', stageId);
          setQuestions([]);
        }
      } catch (error) {
        console.warn('Could not load questions from fallback data:', error);
        setQuestions([]);
      }
    }
  }, [stage, stageId]);

  // Loading state
  if (stageLoading) {
    return (
      <QuizLoadingScreen 
        stage={`‡∏î‡πà‡∏≤‡∏ô ${stageId}`}
        onComplete={() => {}}
      />
    );
  }

  // Error state
  if (stageError || !stage) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-black via-neutral-900 to-zinc-900 flex flex-col">
        <Navbar />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-white mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h1>
            <p className="text-gray-300 mb-8">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏î‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
            <button
              onClick={() => router.push('/stage')}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg flex items-center space-x-2 mx-auto"
            >
              <ArrowLeft size={20} />
              <span>‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πà‡∏≤‡∏ô</span>
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Event Handlers
  const handleContinueFromIntro = () => {
    setGameState('learning');
  };

  const handleStartQuiz = () => {
    if (questions.length === 0) {
      console.warn('No questions available for this stage');
      return;
    }
    setGameState('loading');
    setTimeout(() => setGameState('quiz'), 2000);
  };

  const handleQuizComplete = async (results: {
    score: number;
    totalQuestions: number;
    time: string;
    answers: boolean[];
    percentage: number;
  }) => {
    console.log('Quiz completed with results:', results);
    
    // Record attempt
    if (currentUser?.id) {
      await recordAttempt(stageId, results.score);
      
      // Complete stage if passed (score > 0)
      if (results.score > 0) {
        // Calculate stars based on score percentage
        let stars = 0;
        if (results.score === results.totalQuestions) {
          stars = 3; // Perfect score = 3 stars
        } else if (results.score >= Math.ceil(results.totalQuestions * 0.8)) {
          stars = 2; // 80%+ = 2 stars
        } else if (results.score >= Math.ceil(results.totalQuestions * 0.5)) {
          stars = 1; // 50%+ = 1 star
        }
        
        await completeStage(stageId, results.score, stars, stage.xpReward || 100);
      }
      
      // Refresh progress
      refreshProgress();
    }

    setQuizResults(results);
    setGameState('results');
  };

  const handleRetryQuiz = () => {
    setGameState('quiz');
    setQuizResults(null);
  };

  const handleReturnToStages = () => {
    router.push('/stage');
  };

  const handleQuizExit = () => {
    // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ stage list
    router.push('/stage');
  };

  // Get character data based on stage - different characters for different topics
  const getCharacterForStage = (stageTitle: string) => {
    const title = stageTitle.toLowerCase();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö specific cases ‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô general cases)
    if (title.includes('‡∏î‡∏≤‡∏ß‡∏´‡∏≤‡∏á') || title.includes('‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡πâ‡∏≠‡∏¢') || title.includes('‡∏≠‡∏∏‡∏Å‡∏Å‡∏≤‡∏ö‡∏≤‡∏ï')) {
      return {
        name: "‡πÄ‡∏°‡∏ó‡∏≠‡∏£‡πå",
        avatar: "‚òÑÔ∏è",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏ó‡∏≠‡∏£‡πå ‡∏ú‡∏π‡πâ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏î‡∏≤‡∏ß‡∏´‡∏≤‡∏á üí´ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö ${stageTitle} ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏´‡πà‡∏á‡∏≠‡∏ß‡∏Å‡∏≤‡∏®!`,
        learningContent: `‡∏î‡∏≤‡∏ß‡∏´‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡∏Å‡πâ‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡∏∞‡∏ù‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏≤‡∏á‡∏¢‡∏≤‡∏ß‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‚òÑÔ∏è`,
      };
    } else if (title.includes('‡∏î‡∏ß‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå') || title.includes('‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°')) {
      return {
        name: "‡∏•‡∏π‡∏ô‡πà‡∏≤",
        avatar: "üåï",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏•‡∏π‡∏ô‡πà‡∏≤ ‡∏ú‡∏π‡πâ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏î‡∏ß‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå üåô ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${stageTitle} ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥!`,
        learningContent: `‡∏î‡∏ß‡∏á‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏•‡∏Å 384,400 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏Ñ‡∏à‡∏£‡∏£‡∏≠‡∏ö‡πÇ‡∏•‡∏Å 27.3 ‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏ô‡πâ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡πâ‡∏≥‡∏•‡∏á üåä`,
      };
    } else if (title.includes('‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå') || title.includes('‡πÇ‡∏•‡∏Å')) {
      return {
        name: "‡∏≠‡∏≤‡πÄ‡∏ó‡∏°‡∏¥‡∏™",
        avatar: "üåé",
        introduction: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏≤‡πÄ‡∏ó‡∏°‡∏¥‡∏™ ‡∏ô‡∏±‡∏Å‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå üöÄ ‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏™‡∏≥‡∏£‡∏ß‡∏à ${stageTitle} ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•‡∏Å‡∏±‡∏ô!`,
        learningContent: `‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞‡∏°‡∏µ‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå 8 ‡∏î‡∏ß‡∏á ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏î‡∏ß‡∏á‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏≠‡∏£‡πå‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ô‡∏õ‡∏à‡∏π‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ü™ê`,
      };
    } else if (title.includes('‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå') || (title.includes('‡∏î‡∏≤‡∏ß') && !title.includes('‡∏î‡∏≤‡∏ß‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå') && !title.includes('‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°') && !title.includes('‡∏î‡∏≤‡∏ß‡∏´‡∏≤‡∏á'))) {
      return {
        name: "‡∏î‡∏≤‡∏•‡πà‡∏≤",
        avatar: "‚òÄÔ∏è",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏î‡∏≤‡∏•‡πà‡∏≤ ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå üåü ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${stageTitle} ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞!`,
        learningContent: `‡∏î‡∏ß‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏§‡∏Å‡∏©‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÇ‡∏•‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏°‡∏µ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ú‡∏¥‡∏ß‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 5,500 ‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏ã‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏™ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á 8 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏•‡∏Å ‚ú®`,
      };
    } else if (title.includes('‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞') || title.includes('‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•')) {
      return {
        name: "‡∏Ñ‡∏≠‡∏™‡∏°‡∏≠‡∏™",
        avatar: "‚≠ê",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏™‡∏°‡∏≠‡∏™ ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏ó‡∏±‡∏Å‡∏©‡πå‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏• ‚ú® ‡∏°‡∏≤‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏≠‡∏á ${stageTitle} ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏†‡∏û‡∏Å‡∏±‡∏ô!`,
        learningContent: `‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 13.8 ‡∏û‡∏±‡∏ô‡∏•‡πâ‡∏≤‡∏ô‡∏õ‡∏µ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡πÅ‡∏•‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏ô‡∏•‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏§‡∏Å‡∏©‡πå‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡∏°‡∏´‡∏≤‡∏®‡∏≤‡∏• üåü`,
      };
    } else if (title.includes('fill') || title.includes('blank') || title.includes('‡πÄ‡∏ï‡∏¥‡∏°')) {
      return {
        name: "‡∏Ñ‡∏ß‡∏¥‡∏ã‡∏ã‡∏µ‡πà",
        avatar: "üß©",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏¥‡∏ã‡∏ã‡∏µ‡πà ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤ üîç ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô ${stageTitle} ‡∏Å‡∏±‡∏ô!`,
        learningContent: `‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏à‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô! üéØ`,
      };
    } else if (title.includes('match') || title.includes('‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà')) {
      return {
        name: "‡πÅ‡∏°‡∏ï‡∏ä‡πå",
        avatar: "üîó",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà üéØ ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ${stageTitle} ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!`,
        learningContent: `‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô! üîÑ`,
      };
    } else if (title.includes('true') || title.includes('false') || title.includes('‡∏à‡∏£‡∏¥‡∏á') || title.includes('‡πÄ‡∏ó‡πá‡∏à')) {
      return {
        name: "‡∏ó‡∏£‡∏π‡∏ò",
        avatar: "‚öñÔ∏è",
        introduction: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏£‡∏π‡∏ò ‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏û‡∏≤‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á ‚ö° ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡πá‡∏à‡πÉ‡∏ô ${stageTitle} !`,
        learningContent: `‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πá‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ô! üé≤`,
      };
    } else {
      return {
        name: "‡∏≠‡∏≤‡∏™‡∏≤",
        avatar: "üë©‚ÄçüöÄ",
        introduction: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà ${stageTitle}! ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏≤‡∏™‡∏≤ ‡∏ô‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡∏≠‡∏ß‡∏Å‡∏≤‡∏® ‡∏â‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡∏≤‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå üöÄ`,
        learningContent: `‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô ${stageTitle} ‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô!`,
      };
    }
  };

  const character = {
    ...getCharacterForStage(stage?.title || ''),
    completionMessage: "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ! üéâ",
    encouragements: [
      "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ ‚≠ê",
      "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á! üí™",
      "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß üß†",
      "‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô! üòä",
      "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ! üöÄ"
    ]
  };

  // Render based on game state
  switch (gameState) {
    case 'intro':
      return (
        <CharacterIntro 
          stage={stage}
          character={character}
          onContinue={handleContinueFromIntro}
          currentUser={currentUser}
          stageId={stageId}
        />
      );
    
    case 'learning':
      return (
        <LearningContent 
          stage={stage}
          character={character}
          onStartQuiz={handleStartQuiz}
          questions={questions}
        />
      );

    case 'loading':
      return (
        <QuizLoadingScreen 
          stage={stage.title}
          onComplete={() => setGameState('quiz')}
        />
      );

    case 'quiz':
      return (
        <EnhancedQuizComponent
          questions={questions}
          onComplete={handleQuizComplete}
          onExit={handleQuizExit}
        />
      );

    case 'results':
      if (quizResults) {
        // Create a proper StageData structure for compatibility
        const stageInfo = {
          stage: {
            id: stage.id,
            title: stage.title,
            description: stage.description,
            difficulty: stage.difficulty,
            estimatedTime: stage.estimatedTime,
            thumbnail: stage.thumbnail || "üåå",
            totalStars: stage.totalStars || 3,
            xpReward: stage.xpReward || 100,
            streakBonus: stage.streakBonus || false,
            healthSystem: stage.healthSystem || false,
            rewards: stage.rewards || {
              stars: 3,
              points: stage.xpReward || 100,
              badges: [],
              unlocksStages: []
            },
            maxStars: stage.maxStars || 3,
            requiredStarsToUnlockNext: stage.requiredStarsToUnlockNext || 0,
            createdAt: stage.createdAt || new Date().toISOString(),
            updatedAt: stage.updatedAt || new Date().toISOString()
          },
          prerequisites: [],
          questions: questions,
          character: character ? {
            id: 1,
            stageId: stage.id,
            name: character.name,
            avatar: character.avatar,
            introduction: character.introduction,
            learningContent: character.learningContent,
            completionMessage: character.completionMessage,
            encouragements: character.encouragements || [],
            hints: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
          } : undefined
        };
        
        return (
          <EnhancedResultsComponent
            stageInfo={stageInfo}
            score={quizResults.score}
            totalQuestions={quizResults.totalQuestions || questions.length}
            time={quizResults.time || "0:00"}
            onRetry={handleRetryQuiz}
            onFinish={handleReturnToStages}
          />
        );
      }
      return (
        <QuizLoadingScreen 
          stage={stage.title}
          onComplete={() => {}}
        />
      );

    default:
      return (
        <QuizLoadingScreen 
          stage={stage.title}
          onComplete={() => {}}
        />
      );
  }
}